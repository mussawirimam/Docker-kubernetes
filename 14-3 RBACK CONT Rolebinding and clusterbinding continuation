RBAC
root@master:~# kubectl -n devops get role,rolebindings.rbac.authorization.k8s.io
NAME                                     CREATED AT
role.rbac.authorization.k8s.io/devrole   2025-01-15T21:51:32Z

### this role is having some permissions with it. 
NAME                                                ROLE           AGE
rolebinding.rbac.authorization.k8s.io/devrolebind   Role/devrole   14h
root@master:~# kubectl -n devops describe role devrole
Name:         devrole
Labels:       <none>
Annotations:  <none>
PolicyRule:
  Resources         Non-Resource URLs  Resource Names  Verbs
  ---------         -----------------  --------------  -----
  pods              []                 []              [create update delete list get]  <------------- permission that the role can perform
  secrets           []                 []              [create update delete list get]  <------------- permission that the role can perform
  deployments.apps  []                 []              [create update delete list get]  <------------- permission that the role can perform
root@master:~#

### rolebinding devrole is binded to the user aneesh
root@master:~# kubectl -n devops describe rolebindings.rbac.authorization.k8s.io devrolebind
Name:         devrolebind
Labels:       <none>
Annotations:  <none>
Role:
  Kind:  Role
  Name:  devrole
Subjects:
  Kind  Name    Namespace
  ----  ----    ---------
  User  aneesh
root@master:~#


### Proccess of the autherization
Kubectl will be sending a request to kubeapi server and kubeapi server will be doing the authentication and autherization.
How this user is coming into the picture that is getting authenticated and is getting autherization. Whenever we are working with the kubernetes cluster, you will see the hidden directory 
called (.kube) this file is gereneted when you are doing the kubeadm configuration in the begining of setting up the server


aneesh $ mkdir .cert
aneesh $ ls

### Create Key and CSR 
aneesh $ openssl genrsa -out aneesh.key 2048
Generating RSA private key, 2048 bit long modulus (2 primes)
............................+++++
..............................+++++
e is 65537 (0x010001)
aneesh $ ls
aneesh.key  filesystem  snap
aneesh $ 

### from key we will make the csr 
aneesh $ openssl req -new -key aneesh.key -out aneesh.csr

You are about to be asked to enter information that will be incorporated
into your certificate request.
What you are about to enter is what is called a Distinguished Name or a DN.
There are quite a few fields but you can leave some blank
For some fields there will be a default value,
If you enter '.', the field will be left blank.
-----
Country Name (2 letter code) [AU]:
State or Province Name (full name) [Some-State]:
Locality Name (eg, city) []:
Organization Name (eg, company) [Internet Widgits Pty Ltd]:
Organizational Unit Name (eg, section) []:
Common Name (e.g. server FQDN or YOUR name) []:aneesh
Email Address []:

Please enter the following 'extra' attributes
to be sent with your certificate request
A challenge password []:
An optional company name []:
aneesh $ 
aneesh $ ls
aneesh.csr  aneesh.key  filesystem  snap
aneesh $ 

### Decode the aneesh.csr with base64
aneesh $ cat aneesh.csr | base64 -w 0

### for security, I have removed a lot of strings from it
LS0tLS1CRUdJTiBDRVJUSU
ZJQ0FURSBSRVFVRVNULS0tLS0KTUlJQ216QWt
HQTFVRUJoTUNRVlV4RXpBUkJnTlZCQWdNQ2xOdmJXVXRV
M1JoZEdVeApJVEFmQmdOVkJBb01HRWx1ZEdWeWJtVjBJRmRwWkdkcGRITWdVSFI1SUV4MFpERVBNQTBHQTFVRUF3d0dZVzVsClpYTm9NSUlCSWpBTkJna3Foa2lHOXcwQkFRRUZBQU9DQVE4QU1JSUJDZ0tDQVFFQXZ5dEE0ckd1YW10b1A4WmkKanMrZjJONU80QVBCQ0dDWDY1TWNldVJjNCsybUFXQmJIZ2FiRGhBYnNwd3JmMWdDeStUTW1wUFJqL0V4dml0cApwVTJ6a2RnVkNUMi8rRVEzbWFKeW9kdWxvZWZTbldicG05QjR6YndwMFBXb2hxUG9RS0dYcDNxdTdveHp6b2t3ClB6SEVTQlppaWk0RVRCdVRnK0QwKzViWnppQ2tYL1hNSXJ5Ym1taVNKbnN3NmZLVHJqZG9hbkhhMHhGdGlmcWMKWURIbFNsaXB0YlEwSkp2VzdGWVAySWpnZDVNT3dlU1Z3d1czRVZ3bFhHTmVicExuY0xQT29rK2J3cnhJVEFodQpZTGZQVS8vSGRRRHFHUWpBaDZ1MUVuR1g3MlN5UEJHRXJqbENKZUJQMFdLRGFoSTRCUkI5cTFESitWUWx2MU01CnYxemxTd0lEQVFBQm9BQXdEUVl
aneesh $ 

### Copy your decoded csr key above and plug in the yaml file, we will be creating the certifcate by using the csr, you will be doing it through the kubernetes cluster: meaning through kubernetes we will be signing our certificate

### LOGIN IN BACK TO THE ROOT USER/OR KUBERNETES ADMIN ACCOUNT
### do an exit from the user aneesh

aneesh@controlplane:~$ exit
logout
controlplane $ 

controlplane $ nano csr.yaml 
apiVersion: certificates.k8s.io/v1
kind: CertificateSigningRequest
metadata:
  name: aneesh
spec:
  request: ### <YOU WOULD ADD YOUR KEY HERE> ### LS0tLS1CRUdJTiBDRVJUSUZJQ0FURSBSRVFVRVNULS0tLS0KTUlJQ216Q0NBWU1DQVFBd1ZqRUxNQWtHQTFVRUJoTUNRVlV4RXpBUkJnTlZCQWdNQ2xOdmJXVXRVM1JoZEdVeApJVEFmQmdOVkJBb01HRWx1ZEdWeWJtVjBJRmRwWkdkcGRITWdVSFI1SUV4>
  signerName: kubernetes.io/kube-apiserver-client
  expirationSeconds: 86400 #one day
  usages: 
  - client auth

controlplane $ kubectl create -f csr.yaml 
certificatesigningrequest.certificates.k8s.io/aneesh created
controlplane $ kubectl get csr 
NAME     AGE   SIGNERNAME                            REQUESTOR          REQUESTEDDURATION   CONDITION
aneesh   6s    kubernetes.io/kube-apiserver-client   kubernetes-admin   24h                 Pending      <------ currently the condition is pending 
controlplane $ 

### how it got approve, because when you are creating the csr through the key openssl using the openssl, you have to add your name in FQDN or Your name section look below
# DONT TYPE THIS NOW IT IS DONE ALREADY ABOVE ### aneesh@controlplane:~$ openssl req -new -key aneesh.key -out aneesh.csr
You are about to be asked to enter information that will be incorporated
into your certificate request.
What you are about to enter is what is called a Distinguished Name or a DN.
There are quite a few fields but you can leave some blank
For some fields there will be a default value,
If you enter '.', the field will be left blank.
-----
Country Name (2 letter code) [AU]:
State or Province Name (full name) [Some-State]:
Locality Name (eg, city) []:
Organization Name (eg, company) [Internet Widgits Pty Ltd]:
Organizational Unit Name (eg, section) []:
Common Name (e.g. server FQDN or YOUR name) []:aneesh        <-------------------------------------------------- HERE THIS IS WHAT YOU USED TO SIGNED THE CERTIFICATE TO APPROVE BELOW
Email Address []:

Please enter the following 'extra' attributes
to be sent with your certificate request
A challenge password []:
An optional company name []:


### it is pending, because we have to approve it

controlplane $ kubectl certificate approve aneesh
certificatesigningrequest.certificates.k8s.io/aneesh approved
controlplane $ 

controlplane $ kubectl get csr             
NAME     AGE     SIGNERNAME                            REQUESTOR          REQUESTEDDURATION   CONDITION
aneesh   7m31s   kubernetes.io/kube-apiserver-client   kubernetes-admin   24h                 Approved,Issued     <---------------------- IT IS SELF-SIGNED APPROVED
controlplane $ 

controlplane $ kubectl describe csr aneesh
Name:                aneesh
Labels:              <none>
Annotations:         <none>
CreationTimestamp:   Thu, 16 Jan 2025 20:20:29 +0000
Requesting User:     kubernetes-admin
Signer:              kubernetes.io/kube-apiserver-client
Requested Duration:  24h
Status:              Approved,Issued
Subject:
         Common Name:    aneesh
         Serial Number:  
         Organization:   Internet Widgits Pty Ltd
         Country:        AU
         Province:       Some-State
Events:  <none>
controlplane $ 


### Why is it not showing the user details for the username: aneesh (Need to do troubleshooting, I might have made mistake somewhere.. ) (the reason is this is approver, look below for the answers)
controlplane $ kubectl get csr aneesh -o yaml
apiVersion: certificates.k8s.io/v1
kind: CertificateSigningRequest
metadata:
  creationTimestamp: "2025-01-16T20:20:29Z"
  name: aneesh
  resourceVersion: "7902"
  uid: ccbae82b-70d9-4f23-9e2b-64276a0b1a20
spec:
  expirationSeconds: 86400
  groups:
  - kubeadm:cluster-admins
  - system:authenticated
  request: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURSBSRVFVRVNULS0tLS0KTUlJQ216Q0NBWU1DQVFBd1ZqRUxNQWtHQTFVRUJoTUNRVlV4RXpBUkJnTlZCQWdNQ2xOdmJXVXRVM1JoZEdVeApJVEFmQmdOVkJBb01HRWx1ZEdWeWJtVjBJRmRwWkdkcGRITWdVSFI1SUV4MFpERVBNQTBHQTFVRUF3d0dZVzVsClpYTm9NSUlCSWpBTkJna3Foa2lHOXcwQkFRRUZBQU9DQVE4QU1JSUJDZ0tDQVFFQXYwUjZ4MFlQZVBlaTlZRGEKNVdlbmNmNGVQRGQvTUF4M3NCaWNWRVRySk1CRmpqbWxrS09CaHo4dUY0R2VWSUZIRlBhWWFSQ0xLTWlYMDJ3QwpHQnF5akx4bFBFdS93WmlwcDQyOFBTclp3SVdOajBBWGE4aTdUUTU4ZUJuM0NKVEwvREhUZG5aa010N0RxS28yCjhCekVVTTdFWHpSV2h0cVR1UFJuN1MrSjZWUDF2Z0dSMGtCNVRhSi9SbHMvNDYrdWgrYVBYOUpIME5VVWZHQ2UKVFBDb0ErSEk1UFNjQmd3VjRBa0tHTTlsRWJ5MjVSeFpkZ0lqamxZZTNxRERPaEg3OUN3ZVJZS0pUdFR6dlNMagphSUZDWm5wWjZNQmZRSU1JWVRqV0l6MGo3ZlowOVVoTEJsemdIWWRYWjVRbXMxU0VOK3RBQU11Z0c2ck1hNmVMCi9aZ3BZUUlEQVFBQm9BQXdEUVlKS29aSWh2Y05BUUVMQlFBRGdnRUJBR0gvM2ZJQ1VRZE4rS0tqK2tKQmE0QjAKU3BPS21IT0hnaE5ZOVUraUwrZkozemZXUG5NNWxSbk00SERPUlNKc25qV1FaREN6QjZxcXFaamlrTTF0YTIrdAo5WDZHTWVzbGtucHZ0aFNjOGhlK2tOVkgrUkUvRzcxazZqTGMvMjN2MzZRNWhMMlBLTCtLbDBlZytKYVhac3Y0Cms4Y2FValUvMU9pRHBCdC9hZHd6cnZDL2xUbzZjL3k1TnlCNUxUTmxwaGN0OWh5MWxhcTEvQnJIckR3aUNhRUoKTDZNaUV1SGlwYmQ2UnZTalZMOTFyTHk3Q0xYa0d3dEZMSGJraWt5Y0NRUWtVSWFRc3cwS1lIdk4wSU04S0xaRAo1OFhsVGl5cVk3QkZ1VjZ6OU13alhpcnVLNlVaNEJXaTJIQUNObWtxZ3R3VENLd3ZtcEJJRzZmMG5BL005SGc9Ci0tLS0tRU5EIENFUlRJRklDQVRFIFJFUVVFU1QtLS0tLQo=
  signerName: kubernetes.io/kube-apiserver-client
  usages:
  - client auth
  username: kubernetes-admin         <----- approver name
status:
  certificate: ## COPY THIS THIS CERTIFCATE FROM YOUR TERMINAL AND CONVERT IT INTO CERTIFCATE FORMAT IN ANEESH USER -------> LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURQRENDQWlTZ0F3SUJBZ0lSQU5Wdm1PT2dYMmt0RzU1aDN5RWg5WHd3RFFZSktvWklodmNOQVFFTEJRQXcKRlRFVE1CRUdBMVVFQXhNS2EzVmlaWEp1WlhSbGN6QWVGdzB5TlRBeE1UWXlNREUzTkRSYUZ3MHlOVEF4TVRjeQpNREUzTkRSYU1GWXhDekFKQmdOVkJBWVRBa0ZWTVJNd0VRWURWUVFJRXdwVGIyMWxMVk4wWVhSbE1TRXdId1lEClZRUUtFeGhKYm5SbGNtNWxkQ0JYYVdSbmFYUnpJRkIwZVNCTWRHUXhEekFOQmdOVkJBTVRCbUZ1WldWemFEQ0MKQVNJd0RRWUpLb1pJaHZjTkFRRUJCUUFEZ2dFUEFEQ0NBUW9DZ2dFQkFMOUVlc2RHRDNqM292V0EydVZucDNIKwpIanczZnpBTWQ3QVluRlJFNnlUQVJZNDVwWkNqZ1ljL0xoZUJubFNCUnhUMm1Ha1FpeWpJbDlOc0FoZ2Fzb3k4ClpUeEx2OEdZcWFlTnZEMHEyY0NGalk5QUYydkl1MDBPZkhnWjl3aVV5L3d4MDNaMlpETGV3NmlxTnZBY3hGRE8KeEY4MFZvYmFrN2owWiswdmllbFQ5YjRCa2RKQWVVMmlmMFpiUCtPdnJvZm1qMS9TUjlEVkZIeGdua3p3cUFQaAp5T1QwbkFZTUZlQUpDaGpQWlJHOHR1VWNXWFlDSTQ1V0h0Nmd3em9SKy9Rc0hrV0NpVTdVODcwaTQyaUJRbVo2CldlakFYMENEQ0dFNDFpTTlJKzMyZFBWSVN3WmM0QjJIVjJlVUpyTlVoRGZyUUFETG9CdXF6R3VuaS8yWUtXRUMKQXdFQUFhTkdNRVF3RXdZRFZSMGxCQXd3Q2dZSUt3WUJCUVVIQXdJd0RBWURWUjBUQVFIL0JBSXdBREFmQmdOVgpIU01FR0RBV2dCUUVCRG1VU20yVHVsTklFMmF1MlhTUlI0dHNuREFOQmdrcWhraUc5dzBCQVFzRkFBT0NBUUVBCkZCRHVVL2U5SGtlWXExUzFSNWw0MlNwQWE3SldiY3JOaHkrQ2ZNY21jR01GcVh6SmIxN1Jra3JzOHVJL2lvOUQKdXFpZVRMUE1lV0tGakZrbEU2SkNSelhZZUdkd213U0NzQTNSQTBpTTVtYkZacndPR214SVNadGR1QkNKcWdTVwpPNlN3TmhzWDBWVVVCMWx1TGFWdmE2NHdDMkdTNDgycEcxOXNQdGkyWFVBRVowZndvN1oyWFZkUlpqS0QvbGt5CmNhK0N3ekJmc3BxSkdBaldKMlRlZDFnMTByZ25zQ0dITHZIQ1FDelhHWDRRQnd0TXJwc0RNS1RwZkZoQ3RwemoKWU5ESDBoenorOUN3YWdsYitmeFJZT3FYOGVML2JmL0ZWNkRhQjJ6WDRFT2MvT0xjZWo3SFRibkN5V08xNUZUKwptRW9jV1FDa256VktaSUVaTE9HeXlBPT0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
  conditions:
  - lastTransitionTime: "2025-01-16T20:22:44Z"
    lastUpdateTime: "2025-01-16T20:22:44Z"
    message: This CSR was approved by kubectl certificate approve.
    reason: KubectlApprove
    status: "True"
    type: Approved
controlplane $ 


### kubernetes-admin is the approver name. I will be copying the certificate.
### Let's copy the certificate from above output for csr 
### change to the previous user, aneesh and we create a file 
### but before we create that file, we will need to convert the file to certifcate format


controlplane $ su - aneesh
aneesh@controlplane:~$ 

### remove the csr.yaml file not needed here: rm csr.yaml 
aneesh@controlplane:~$ ls
aneesh.cr  aneesh.csr  aneesh.key  csr.yaml
aneesh@controlplane:~$ 


aneesh@controlplane:~$ echo "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tS2EzVmlaWEp1WlhSbGN6QWVJBWVRBa0ZWTVJNd0VRWURWUVFJRXdwVGIyMWxMVk4wWVhSbE1TRXdId1lEClZRUUtFeGhKYm5SbGNtNWxkQ0JYYVdSbmFYUnpJRkIwZVNCTWRHUXhEekFOQmdOVkJBTVRCbUZ1WldWemFEQ0MKQVNJd0RRWUpLb1pJaHZjTkFRRUJCUUFEZ2dFUEFEQ0NBUW9DZ2dFQkFMOUVlc2RHRDNqM292V0EydVZucDNIKwpIanczZnpBTWQ3QVluRlJFNnlUQVJZNDVwWkNqZ1ljL0xoZUJubFNCUnhUMm1Ha1FpeWpJbDlOc0FoZ2Fzb3k4ClpUeEx2OEdZcWFlTnZEMHEyY0NGalk5QUYydkl1MDBPZkhnWjl3aVV5L3d4MDNaMlpETGV3NmlxTnZBY3hGRE8KeEY4MFZvYmFrN2owWiswdmllbFQ5YjRCa2RKQWVVMmlmMFpiUCtPdnJvZm1qMS9TUjlEVkZIeGdua3p3cUFQaAp5T1QwbkFZTUZlQUpDaGpQWlJHOHR1VWNXWFlDSTQ1V0h0Nmd3em9SKy9Rc0hrV0NpVTdVODcwaTQyaUJRbVo2CldlakFYMENEQ0dFNDFpTTlJKzMyZFBWSVN3WmM0QjJIVjJlVUpyTlVoRGZyUUFETG9CdXF6R3VuaS8yWUtXRUMKQXdFQUFhTkdNRVF3RXdZRFZSMGxCQXd3Q2dZSUt3WUJCUVVIQXdJd0RBWURWUjBUQVFIL0JBSXdBREFmQmdOVgpIU01FR0RBV2dCUUVCRG1VU20yVHVsTklFMmF1MlhTUlI0dHNuREFOQmdrcWhraUc5dzBCQVFzRkFBT0NBUUVBCkZCRHVVL2U5SGtlWXExUzFSNWw0MlNwQWE3SldiY3JOaHkrQ2ZNY21jR01GcVh6SmIxN1Jra3JzOHVJL2lvOUQKdXFpZVRMUE1lV0tGakZrbEU2SkNSelhZZUdkd213U0NzQTNSQTBpTTVtYkZacndPR214SVNadGR1QkNKcWdTVwpPNlN3TmhzWDBWVVVCMWx1TGFWdmE2NHdDMkdTNDgycEcxOXNQdGkyWFVBRVowZndvN1oyWFZkUlpqS0QvbGt5CmNhK0N3ekJmc3BxSkdBaldKMlRlZDFnMTByZ25zQ0dITHZIQ1FDelhHWDRRQnd0TXJwc0RNS1RwZkZoQ3RwemoKWU5ESDBoenorOUN3YWdsYitmeFJZT3FYOGVML2JmL0ZWNkRhQjJ6WDRFT2MvT0xjZWo3SFRibkN5V08xNUZUKwptRW9jV1FDa256VktaSUVaTE9HeXlBPT0KLS0tLS1FT
kQgQ0VSVElGSUNBVEUtLS0tLQo=" | base64 -d > aneesh.crt
aneesh@controlplane:~$ ls
aneesh.crt  aneesh.csr  aneesh.key
aneesh@controlplane:~$ 


aneesh@controlplane:~$ cat aneesh.crt
-----BEGIN CERTIFICATE-----
MIIDPDCCAiSgAwIBAgIRANVvmOOgX2ktG55h3yEh9XwwDQYJKoZIhvcNAQELBQAw
FTETMBEGA1UEAxMKa3ViZXJuZXRlczAeFw0yNTAxMTYyMDE3NDRaFw0yNTAxMTcy
MDE3NDRaMFYxCzAJBgNVBAYTAkFVMRMwEQYDVQQIEwpTb21lLVN0YXRlMSEwHwYD
VQQKExhJbnRlcm5ldCBXaWRnaXRzIFB0eSBMdGQxDzANBgNVBAMTBmFuZWVzaDCC
ASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBAL9EesdGD3j3ovWA2uVnp3H+
Hjw3fzAMd7AYnFRE6yTARY45pZCjgYc/LheBnlSBRxT2mGkQiyjIl9NsAhgasoy8
ZTxLv8GYqaeNvD0q2cCFjY9AF2vIu00OfHgZ9wiUy/wx03Z2ZDLew6iqNvAcxFDO
xF80Vobak7j0Z+0vielT9b4BkdJAeU2if0ZbP+Ovrofmj1/SR9DVFHxgnkzwqAPh
yOT0nAYMFeAJCh7Rkkrs8uI/io9D
uqieTLPMeWKFjFklE6JCRzXYeGdwmwSCsA3RA0iM5mbFZrwOGmxISZtduBCJqgSW
O6SwNhsX0VUUB1luLaVva64wC2GS482pG19sPti2XUAEZ0fwo7Z2XVdRZjKD/lky
ca+CwzBfspqJGAjWJ2Ted1g10rgnsCGHLvHCQCzXGX4QBwtMrpsDMKTpfFhCtpzj
YNDH0hzz+9Cwaglb+fxRYOqX8eL/bf/FV6DaB2zX4EOc/OLcej7HTbnCyWO15FT+
mEocWQCknzVKZIEZLOGyyA==
-----END CERTIFICATE-----
aneesh@controlplane:~$ 


### command to set user in this file using following command 
### kubectl config set-credentials aneesh --client-key=aneesh.key --client-certificate=aneesh.crt --embed-certs

aneesh@controlplane:~$ kubectl config set-credentials aneesh --client-key=aneesh.key --client-certificate=aneesh.crt --embed-certs
User "aneesh" set.
aneesh@controlplane:~$ 

aneesh@controlplane:~$ ls -al
total 52
drwxr-xr-x 6 aneesh aneesh 4096 Jan 16 20:53 .
drwxr-xr-x 4 root   root   4096 Jan 16 20:05 ..
-rw------- 1 aneesh aneesh  272 Jan 16 20:19 .bash_history
-rw-r--r-- 1 aneesh aneesh  220 Jan 16 20:05 .bash_logout
-rw-r--r-- 1 aneesh aneesh 3771 Jan 16 20:05 .bashrc
drwxrwxr-x 2 aneesh aneesh 4096 Jan 16 20:16 .cert
drwx------ 3 aneesh aneesh 4096 Jan 16 20:10 .config
drwxr-xr-x 2 aneesh aneesh 4096 Jan 16 20:53 .kube    <--------------- .kube file is now created here
drwxrwxr-x 3 aneesh aneesh 4096 Jan 16 20:17 .local
-rw-r--r-- 1 aneesh aneesh  807 Jan 16 20:05 .profile
-rw-rw-r-- 1 aneesh aneesh 1184 Jan 16 20:48 aneesh.crt
-rw-rw-r-- 1 aneesh aneesh  980 Jan 16 20:16 aneesh.csr
-rw------- 1 aneesh aneesh 1675 Jan 16 20:16 aneesh.key
aneesh@controlplane:~$ 


### User is configured in this file but lots of things are missing from it
aneesh@controlplane:~$ nano .kube/config 

apiVersion: v1
clusters: null    <-------------- this is missing, we need to fill these information from the root user SEE BELOW
contexts: null    <-------------- this is missing, we need to fill these information from the root user SEE BELOW
current-context: ""
kind: Config
preferences: {}
users:
- name: aneesh
  user:
    client-certificate-data: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURQRENDQWlTZ0F3SUJBZ0lSQU5Wdm1PT2dYMmt0RzU1aDN5RWg5WHd3RFFZSktvWklodmNOQVFFTEJRQXcKRlRFVE1CRUdBMVVFQXhNS2EzVmlaWEp1WlhSbGN6QWVGdzB5TlRB>
    client-key-data: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFb3dJQkFBS0NBUUVBdjBSNngwWVBlUGVpOVlEYTVXZW5jZjRlUERkL01BeDNzQmljVkVUckpNQkZqam1sCmtLT0Joejh1RjRHZVZJRkhGUGFZYVJDTEtNaVgwMndDR0JxeWpMe


### go to kubeadmin/root user 
exit aneesh
controlplane $ cd .kube/
controlplane $ 

### copy the certificate and get the clusters contexts current contexts
controlplane $ cat config

apiVersion: v1
clusters: 
- cluster: ##copy this from here <----------------------------
    certificate-authority-data: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURCVENDQWUyZ0F3SUJBZ0lJZCtVUFp3V2R4bTB3RFFZSktvWklodmNOQVFFTEJRQXdGVEVUTUJFR0ExVUUKQXhNS2EzVmlaWEp1WlhSbGN6QWVGdzB5TlRBeE1ESXdPVFF5TkRsYUZ3MHpOREV5TXpFd09UUTNORGxhTUJVeApFekFSQmdOVkJBTVRDbXQxWW1WeWJtVjBaWE13Z2dFaU1BMEdDU3FHU0liM0RRRUJBUVVBQTRJQkR3QXdnZ0VLCkFvSUJBUURWOVpncDA3cW9nR2R3REJqa1RPaXY3bTE0a2FSYytRSXh3RWtNUXhhS3p4TTh1ODhHNk5vUW1xVk8KUFozSGdzbncwTHZxb3VUTGozZC9vNzVRR3Fkd01KNDZDVXZKUVNnSDlNRm1rMmJ0cndoaG5UZWQyNXlyRU1MeQp3MHVyVXE4eVBoVVdKYjloeEVQSms1OTduRkpNelBmWERzcmN5c1Z5dDhlWmFJYmJsbTNsanRsN01oZXJvczE2CngwMVhseS9kbGpTRmg5VkVpVUkyMGhJYlRRaUFLR0ZzY3dqNURUNlZTNlRqZ3ZGbnBMMGlSSndFcXd0L1BrbmQKMFJGaWRsaUljajdUeGprZ3hmVW9VdnBaZjlJcG1FTHptb1JUdHQyZ1pvTFNNaFB0MzNxRER6OUpuNWt6V055RQpLZUNzL2JhMU1YWWRCdGVwcVJ4bEJqUHFZd09wQWdNQkFBR2pXVEJYTUE0R0ExVWREd0VCL3dRRUF3SUNwREFQCkJnTlZIUk1CQWY4RUJUQURBUUgvTUIwR0ExVWREZ1FXQkJRRUJEbVVTbTJUdWxOSUUyYXUyWFNSUjR0c25EQVYKQmdOVkhSRUVEakFNZ2dwcmRXSmxjbTVsZEdWek1BMEdDU3FHU0liM0RRRUJDd1VBQTRJQkFRQ0R6UGs2ZjJsOApkdnJXZFFDQmpWQkVIVE41OUd1eTRRbWkxN2Z4QTQwMmQrbWV2ODNxT2puVjlCVzVZRXBkalpSa0VhSkY2NVNBCnZ1RzMzaTVZZjZnUUdPR3lwRnB5RDhwNFNQRnFTdnRhTkVJcVd5anNodjgrbUp6ZHFYZzFyS0VLTFpZcG9xMG4KVGpOL1VaL0RkdGs0aUl0N1huLzcxV2Fvdk4xSXVpeGRwVVFWaXNreHhpTXhHSHEvQlpQeXUyRURDVXZWeGdaTApEalNGNWd1TGdlV25DWEJ0R0huY3d5SXdrZVJaTUYrMkNWSkN0Y0krdGtCUkJVc0lyd0h5a2xlQ003T1ZuOVhuCnkzU1p4bE9yNkJCdGh3bisxN2Z1TTRoNFo1M1J4SXJSYm16Y3JXWk1qdTh0bGUvTnRvK0NYN0djMFcvbnhJKzEKTW9INGcyRlFnMmZwCi0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K
    server: https://172.30.1.2:6443
  name: kubernetes
contexts:
- context:
    cluster: kubernetes
    user: kubernetes-admin
  name: kubernetes-admin@kubernetes  ### till here <------------------------
current-context: kubernetes-admin@kubernetes
kind: Config
preferences: {}
users:
- name: kubernetes-admin
  user:
    client-certificate-data: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURLVENDQWhHZ0F3SUJBZ0lJT292dVFRRXBhY0l3RFFZSktvWklodmNOQVFFTEJRQXdGVEVUTUJFR0ExVUUKQXhNS2EzVmlaWEp1WlhSbGN6QWVGdzB5TlRBeE1ESXdPVFF5TkRsYUZ3MHlOakF4TURJd09UUTNORGxhTUR3eApIekFkQmdOVkJBb1RGbXQxWW1WaFpHMDZZMngxYzNSbGNpMWhaRzFwYm5NeEdUQVhCZ05WQkFNVEVHdDFZbVZ5CmJtVjBaWE10WVdSdGFXNHdnZ0VpTUEwR0NTcUdTSWIzRFFFQkFRVUFBNElCRHdBd2dnRUtBb0lCQVFETUZPSWwKenYwNW9aWHMvWk1hWTAxMHd0eitUSkhOZmxxOUQxUnBqSmRYMktFWmFocnNTL0t2QWNYd3ZVWkRycVFmTXJINApjSTl6QUphME5RMEN6REhjaXN5L1RmMThPU2ZsVHVJdGtYMU1tRm8wdHVoZkM0dE4xQUZOTlVvUk5ZSmxNWlR2CjZBb3BqM3VtQmZGcEp1OERIZnY2elhlK0dEaEJGazFISm9Va2ZMUzhIKzZsYnJ6aGJBaE4vTEttRDh0ZU41VC8KdVBSVHlJL3dtbnJ4eXNCTmswb3FhZWxwaTF5MFNndTIydGRNaWduRloxcnR3MkRmbG9pSTJPTmdHSHVXWnU5Zgpmek1BQWZhUHV1M0dSdE1JMmJoL2NsVSsxUHNiTC92R2ZKbkNudVBFNlYyVDlMNmNsTU5sNnJjWEFzT1VMUVZSCjhIaE1UNGtiUGh1Z3lmM2JBZ01CQUFHalZqQlVNQTRHQTFVZER3RUIvd1FFQXdJRm9EQVRCZ05WSFNVRUREQUsKQmdnckJnRUZCUWNEQWpBTUJnTlZIUk1CQWY4RUFqQUFNQjhHQTFVZEl3UVlNQmFBRkFRRU9aUktiWk82VTBnVApacTdaZEpGSGkyeWNNQTBHQ1NxR1NJYjNEUUVCQ3dVQUE0SUJBUUNqUllpb2dqQU5odzR5REYzd3ZJWEpYOXhJCmswZHIwK0NSOUgzWUhLalh1T0xoZHRHY0N0QnZhYThwR0J2YnIvTzYyeXNMZjBabHFCSDE5MEd2U3RaVFdBd0sKMi81YWRRVHBCZWZWalhjcXlkVmJ6UGd0Nkt1cGtDZDVZOVZXSzVGcW1LSkY1eS8yM2RZdlNUWWZXek5xOXNxSgppQ0UxMGtkUFV1Vm9PeHN1UE04ZTM1T3lWOFpxYXBpK1N0MmdEaXg5bXVudklFT215enp6Y1d4YUdYM05BZkg2ClVCeStZVmVrY09DMVV3Y3VFck5JM09FNnFsTnVzMWI2S01qOWRtM2FVNFJuWWZIaHJqVC9QTWxNTmJaRmR4aXIKQ0txZ05lUGI0VDZ5SVZhcmVDUUliRHR3bWo4MUc5aUtXV0ZoYXkxTVg4dEN1SCs1WmE3Z2x1dHYvaXA1Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K
    client-key-data: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcFFJQkFBS0NBUUVBekJUaUpjNzlPYUdWN1AyVEdtTk5kTUxjL2t5UnpYNWF2UTlVYVl5WFY5aWhHV29hCjdFdnlyd0hGOEwxR1E2NmtIekt4K0hDUGN3Q1d0RFVOQXN3eDNJck12MDM5ZkRrbjVVN2lMWkY5VEpoYU5MYm8KWHd1TFRkUUJUVFZLRVRXQ1pUR1U3K2dLS1k5N3BnWHhhU2J2QXgzNytzMTN2aGc0UVJaTlJ5YUZKSHkwdkIvdQpwVzY4NFd3SVRmeXlwZy9MWGplVS83ajBVOGlQOEpwNjhjckFUWk5LS21ucGFZdGN0RW9MdHRyWFRJb0p4V2RhCjdjTmczNWFJaU5qallCaDdsbWJ2WDM4ekFBSDJqN3J0eGtiVENObTRmM0pWUHRUN0d5Lzd4bnlad3A3anhPbGQKay9TK25KVERaZXEzRndMRGxDMEZVZkI0VEUrSkd6NGJvTW45MndJREFRQUJBb0lCQVFDQy85UzZtRWVMdXVGVwpJdDlPVFBmblB6NUVManBaUWdaVTNZWTl5blZMZWs3TzFZRTZ0UFd1eU9DYVM2VFN4VU9za3dvU2c0NVJMOHVOCkdaQ2tmeFp5anRZbTVwVVVMRXdqc2FNVnhSSTlISDZxMzg0QlZKT3kvYWRvUEJDelF6blVZeU5MYkJNNTRsUm8KbWVBQXMzRXcrd3BJVDZQUmJoS09GUmE5MlVnVnhxRjNJVkZwMFZqbTFITEUvQnJMWVdzN1FHaDY0eU5LQkRNawptTmZGZjVSODNyc21iekwyUUVvT2l0RXBqczZadHFiK2NBNkVQd1gvRXNPT1g2VXA0YnRucmFKZjZvQS9EN0pUCkxuU1BKTE0xN1lQYVl6ODhlWm1DSlRWanB3M1hqMGc3UUhYQ3dkNzEzV2VXOXlDZEVYM3htaUZIbUNhSE92SVkKNWRMenNaVEJBb0dCQU9JTFlONXpPbmJvWG5sM0VZVVZoRHlPdCt0VFZSRVZLdkNhTzZzWUlOSGlLRjZ6bGlQOQpCdVRQOFBXRUdWNEhkNWVwdVoxcHA1U2JJQmNBSXJZTlFHa0tWUFVZSWo4L2t1emViU3lZSzFLcTFwQ05ZQ1JVCnZQR1JnaXZQVmgybm5NWlR2MUFNQzNxcEZ2WlNjUGFpb0R1RDNMQVNjUmpjak9iYkVKVm1kZFA1QW9HQkFPY2cKYUl6VWZ5NFh2VXRPcjVkYktiQmZtbEdET3lCdXBRb2Vidjh1S0VCNDRoN0U0RktyUmtZWXB4UXM5bkNnR2c5eAorYWZmNUNPMnZkaDNyV3E2WUJYTTRxdG5HV0VKSkd3dmI5V1h5bTRGcGVyR29IdGFRUy9ONUVxa1BZYnlLQVFjCmhrYmNLTlhJYmRMOUkwc04zcTNybXpiaU5rbGMwRWdFZmlzMG9TMXpBb0dCQU1ZRVY3aW5VcWtGeUhVNWhFU0UKWTlJMDZCTWpiaHJINDFUZ2w3SzdNVTBMaEhmcGRIWlVXdXlvNkpuN1BjbXNXdXltUnk4SmRqOXRZVUFrNDBOOQorbFhLTWtCL0FzbExaT2RSdG12aFpkcEdSQzVmV3NDWTV1ZnJvdy9EMHRtcGttSCt6VkpQS3VNcUt5NWZiQXZ5CnpORTJJMmF1MFJxSllubDlvRnB3Wm5ucEFvR0FJRVcvTTRMc2EwUTNVMCtlWnhUOG9qc0hNa0NQdmZ5VklPK1UKOGg3QTBoZlBBeHJjYzg2a2xsOFUzVlZWNSs0REZZc0ZvREk4Q2R5WGI2VnVXb3ZCcE9taDhPc0plU29zb3NxUQo1Qk00MmRvQ0MrRkdRVk1kN1EzanhhUmZUdnQ3S08vT3RCQkR4MjRnSDZqbkI3RGRHZzNlODIvc3dwdXFIWlE3CkJjOW9mZzhDZ1lFQW9MSjAzSGJRMWRDN1hNKzVGZGMzR25SeW5QZkh0azdrd2Y2ay9oY2JIRDZ5K21TQnpoWVIKeXVyb2djTERCNmozbUVjVHlJb2tyVzdYM2lPWjd6dWh3Uy8zM2c0NllpR3ZNTHYrYXhGZGczUmlPL3A5RnlBcwpTVzdXUE90ZUd6a1lVRkE4WEFSMUZjQVY2UVpDSU5LZm90ZTJ2OTNoVmZZekwxYmx2SHErdGw0PQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQo=
controlplane $ 

su - aneesh
### add the copied section from the kubeadmin user inside the config file of aneesh after switching the user to aneesh
### we are doing this much work for on-premise kubernetes, on the cloud kubernetes it is much more easier with one command eks/aks to update settings. (need to find the command)
aneesh@controlplane:~/.kube$ nano config
apiVersion: v1
clusters:
- cluster: #certificate authority part was copied from the kubernetes admin config file check above 
    certificate-authority-data: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURCVENDQWUyZ0F3SUJBZ0lJZCtVUFp3V2R4bTB3RFFZSktvWklodmNOQVFFTEJRQXdGVEVUTUJFR0ExVUUKQXhNS2EzVmlaWEp1WlhSbGN6QWVGdzB5TlRBeE1ESXdPVFF5TkR>
    server: https://172.30.1.2:6443
  name: kubernetes
contexts:
- context:
    cluster: kubernetes
    user: aneesh ## change this to aneesh
  name: aneesh@kubernetes ## change this to aneesh
current-context: aneesh@kubernetes ## change this to aneesh
kind: Config
preferences: {}
users:
- name: aneesh
  user:
    client-certificate-data: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURQRENDQWlTZ0F3SUJBZ0lSQUxNb2tlY1dCb3pIQjZZL0ZmVVpTUk13RFFZSktvWklodmNOQVFFTEJRQXcKRlRFVE1CRUdBMVVFQXhNS2EzVmlaWEp1WlhSbGN6QWVGdzB5TlRBeE>
    client-key-data: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcGdJQkFBS0NBUUVBdmlJZmwwdWVCdHRrVGJQalRaZU9XSDc0NDErVGp4S1Q4MlZzN0tub1NDMnFOejl6CjB4dFR6dHh2TWNERjAvYnYyaWdXTDI1VXRlbFZ3VUVsNlhEMnpDWEptcD>

### my teacher made mistake because of the clusterrole but the results i got are correct below!
### you are only allowed to perform the verbs that were spacified in the rolebind.yaml file (check above for the list for verbs the user can perform and match it below or on your terminal)
aneesh@controlplane:~$ kubectl get pods
Error from server (Forbidden): pods is forbidden: User "aneesh" cannot list resource "pods" in API group "" in the namespace "default"
aneesh@controlplane:~$ kubectl -n devops get pods
No resources found in devops namespace.
aneesh@controlplane:~$ nano .kube/config 
aneesh@controlplane:~$ kubectl -n devops get pods
NAME    READY   STATUS    RESTARTS   AGE
nginx   1/1     Running   0          16s
aneesh@controlplane:~$ 

aneesh@controlplane:~$ kubectl get secrets -n devops
No resources found in devops namespace.
aneesh@controlplane:~$ kubectl get deployment -n devops
No resources found in devops namespace.
aneesh@controlplane:~$ kubectl get sts -n devops
Error from server (Forbidden): statefulsets.apps is forbidden: User "aneesh" cannot list resource "statefulsets" in API group "apps" in the namespace "devops"
aneesh@controlplane:~$ 

### this is correct, if there was aneesh then you would be able to get the access to all the name spaces
controlplane $ kubectl get clusterrole|grep "aneesh"
controlplane $ 
controlplane $ kubectl get clusterrolebindings.rbac.authorization.k8s.io | grep "aneesh"
controlplane $ 

### we can set it in our context 
### this command will add the context to the config in your aneesh user and you dont have to define the -n devops again and again.
kubectl config set-context $(kubectl config current-context) --namespace devops
# to add the context 
go to the aneesh .kube/config file and add look under the 
- contexts: 
    cluster: kubernetes
    namespace: devops <--------------- this part will be added from the above command.
==========================ROLE BINDING ENDS====================

####################### CLUSTER LEVEL ACCESS ####################### 
now if you want your user to have the cluster level access, only one thing is required to do that.
only one thing is required to do. In your same file devrole.yaml file instead of defining the role in kind: you define the clusterrole

So to give your user the cluster level access, while you are binding it. you need to define in rolebind.yaml  file in the kind: clusterrolebinding.
so the user will be havinf the access of the object on the cluster level

second thing is that while implementing the role and role binding to the user, can be assigned to a user or a group or a service account.
What is the user of the service account. Whenever you are creating any pod with some of the service account.
What is the use of the service account?
when you do a kubectl describe pod <name>
you will see these pods are being created with the default service account 
This service account will have some of the limited permissions. We can create our own service account with the previledges/permissions. 
Why permission is required to run a pod. sometimes, yuou want to perform the kubernetes actions while being inside the pod, then you need the permissions. 


controlplane $ kubectl run test --image nginx
Error from server (AlreadyExists): pods "test" already exists
controlplane $ kubectl get pod
NAME    READY   STATUS    RESTARTS   AGE
nginx   1/1     Running   0          6m38s
test    1/1     Running   0          80s
controlplane $ kubectl exec -it test -- bash
root@test:/# 

if you want to run the kubectl command within the k8s container, we will have to first install the kubectl on ubuntu 

### REMEMBER IM ON KILLER CODE THAT IS WHY THE VERSION IS DIFFERENT, YOURS MIGHT BE DIFFERENT. 
### check the k8s version and install kubectl on the container accodingly
controlplane $ kubectl exec -it test -- bash
root@test:/# exit
exit
controlplane $ kubectl get nodes
NAME           STATUS   ROLES           AGE   VERSION
controlplane   Ready    control-plane   16d   v1.31.0
node01         Ready    <none>          16d   v1.31.0
controlplane $ 

controlplane $ kubectl exec -it test -- bash
root@test:/# curl -LO https://dl.k8s.io/release/v1.31.0/bin/linux/amd64/kubectl
  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current
                                 Dload  Upload   Total   Spent    Left  Speed
100   138  100   138    0     0    809      0 --:--:-- --:--:-- --:--:--   807
100 53.7M  100 53.7M    0     0  19.9M      0  0:00:02  0:00:02 --:--:-- 17.5M
root@test:/# ls
bin  boot  dev  docker-entrypoint.d  docker-entrypoint.sh  etc  home  kubectl  lib  lib64  media  mnt  opt  proc  root  run  sbin  srv  sys  tmp  usr  var
root@test:/# 

### we need to make it executable
root@test:/# ls -l
-rw-r--r--   1 root root 56381592 Jan 18 13:32 kubectl
root@test:/# chmod +x kubectl 
root@test:/# ./kubectl
...
### move it to bin so that you can call the command from anywhere
root@test:/# mv kubectl /bin
root@test:/# 

do we have to implement the certificate creation user creation and the steps we did in the clusterrolebinding etc? 
kubectl is smart, it knows that you have downloaded it in the container on the k8s. It knows where it is being run.

### it is looking for the service account by default when you type in the kubectl get pods and it is saying that the service....default cannot list resource "pods"
### it (kubectl) knows that you are running inside the pod
root@test:/# kubectl get pods
Error from server (Forbidden): pods is forbidden: User "system:serviceaccount:default:default" cannot list resource "pods" in API group "" in the namespace "default"
root@test:/# 

### we will be creating a role binding for the service account
### how we will be creating the service account? 
root@test:/# exit
exit
command terminated with exit code 1
controlplane $ kubectl create sa mango
serviceaccount/mango created
controlplane $ 

controlplane $ kubectl get sa
NAME      SECRETS   AGE
default   0         16d
mango     0         24s
controlplane $ 

### important note: whenever you are creating a kubernetes object that should match/relevant to your application so that you can identify that application belongs to particular application. 
if you will randomly choose the names, you will be having a huge list of the service account on your system, you will not be able to identify which service account belongs to which account.

controlplane $ kubectl create sa orange
serviceaccount/orange created
controlplane $ kubectl get sa
NAME      SECRETS   AGE
default   0         16d
orange    0         5s
controlplane $ 


### important 
### In previous version of the kubernetes from .26.0 whenever we use to create a service account, that service account needs to get a token created with it. In the latest version of the kubernetes, you will not be having token created. 
### token creation use to happen while you are running the command called kube create service account and service account name, so how is the token being created? with the help of the secret object, that means one more secret needs to 
be created in the background. In the newer version of the kubernetes, you have to create the secret manually, you need to create the secret and you need to map that secret to this service account. You can do that with the yaml file. 


