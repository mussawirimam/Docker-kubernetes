internal Service:
ClusterIP
External services:
NodePort 
LoadBalancer

Use ClusterIP if you don’t need external access.
Use NodePort if you need basic external access to the service without a cloud provider.
Use LoadBalancer if you want to expose your service externally with automatic load balancing and high availability.

First 
we will create two containers in one pod with different ports with NodePort service and we will access the our pod from outside the cluster on the targetPort 30124:
- wordpress
- mysqldb 

############################# NODEPORT SERVICE BEGINS #############################

NODEPORT NETWORK OVERLAY PORT 80:30124 
(wordpress-svc   NodePort    10.108.5.219   <none>        80:30124/TCP   26h)
-------------------
| mypod 10.1.2.50 |
-------------------
| - wordpress 80  |
| - db 3306       |
-------------------

Based on the hostname (which is essentially the pod name) and the port number, containers within the same pod can communicate with each other.
This type of service is called a NodePort. When two services exist within the same pod, the NodePort service allows communication between them.


############### FIXED YAML FOR WORDPRESS AND MYSQL WITH NODEPORT SERVICE ###############
vi wordpressaneeshfixed.yaml
apiVersion: v1
kind: Pod
metadata:
  name: wordpress
  labels:
    app: wordpress
spec:
  containers:
  - name: con1
    image: wordpress:latest
    env:
    - name: WORDPRESS_DB_HOST
      value: wordpress
    - name: WORDPRESS_DB_USER
      value: root
    - name: WORDPRESS_DB_PASSWORD
      value: test123
    - name: WORDPRESS_DB_NAME
      value: wordpress
    - name: WORDPRESS_TABLE_PREFIX
      value: wp_
    ports:
    - containerPort: 80
  - name: con2
    image: mysql:5.7
    env:
    - name: MYSQL_ROOT_PASSWORD
      value: test123       # MySQL root password
    - name: MYSQL_DATABASE
      value: wordpress     # MySQL database name
    ports:
    - containerPort: 3306
---
apiVersion: v1
kind: Service
metadata:
  name: wordpress-svc
spec:
  type: NodePort
  selector:
    app: wordpress
  ports:
  - port: 80
    protocol: TCP
    targetPort: 80
    nodePort: 30124

:wq!

############### FIXED YAML FOR WORDPRESS AND MYSQL WITH NODEPORT SERVICE ###############

root@master:~/app# kkgn -o wide
NAME     STATUS   ROLES           AGE     VERSION    INTERNAL-IP      EXTERNAL-IP   OS-IMAGE             KERNEL-VERSION     CONTAINER-RUNTIME
master   Ready    control-plane   3d21h   v1.28.15   192.168.29.134   <none>        Ubuntu 24.04.1 LTS   6.8.0-49-generic   cri-o://1.28.4
node1    Ready    <none>          2d13h   v1.28.15   192.168.29.135   <none>        Ubuntu 24.04.1 LTS   6.8.0-49-generic   cri-o://1.28.4
node2    Ready    <none>          22h     v1.28.15   192.168.29.136   <none>        Ubuntu 24.04.1 LTS   6.8.0-41-generic   cri-o://1.28.4
root@master:~/app#


root@master:~/app# kkgs
NAME            TYPE        CLUSTER-IP     EXTERNAL-IP   PORT(S)        AGE
kubernetes      ClusterIP   10.96.0.1      <none>        443/TCP        3d21h
wordpress-svc   NodePort    10.108.5.219   <none>        80:30124/TCP   26h
root@master:~/app#

root@master:~/app# kkgp -o wide
NAME        READY   STATUS    RESTARTS   AGE   IP               NODE    NOMINATED NODE   READINESS GATES
wordpress   2/2     Running   2          26h   172.17.166.129   node1   <none>           <none>
root@master:~/app#


root@master:~# kubectl exec -it wordpress -- bash
Defaulted container "con1" out of: con1, con2
root@wordpress:/var/www/html# hostname
wordpress
root@wordpress:/var/www/html# exit
exit

root@master:~/app# kkg po
NAME        READY   STATUS    RESTARTS   AGE
wordpress   2/2     Running   2          26h
root@master:~/app# kubectl exec -it wordpress -c con2 -- bash
bash-4.2# hostname
bash: hostname: command not found
bash-4.2# exit

#the host name is wordpress so in the Database Host on the browser when connecting to this you will add in Database Host:wordpress. 
root@master:~/app# kubectl exec -it wordpress -c con2 -- bash
bash-4.2# cat /etc/hostname
wordpress
bash-4.2#

---- ON BROWSER ----
http://192.168.29.135:30124/wp-admin/install.php
Welcome
Welcome to the famous five-minute WordPress installation process! Just fill in the information below and you’ll be on your way to using the most extendable and powerful personal publishing platform in the world.

Information needed
Please provide the following information. Do not worry, you can always change these settings later.

---- ON BROWSER ENDS ----
############################# NODEPORT SERVICE ENDS #############################

#####################  CLUSTER IP SERVICE BEGINS #####################

# we will be implementing this architecture, which is having front-end pod running on seperate pod running on a different node and db pod, which is another seperate pod running on different/or same node. To communicate this time, from wordpress to database pod we will create a type of service
called Cluster-IP service and that service name (mydb in this case) will be used as the hostname

EXAMPLE:
apiVersion: v1
metdata:
  name:mydb
spec:
  type:ClusterIP
  ports:
  - port:3306
  selector:
    app:mydb

node1 192.168.0.20
-------------------
| - wordpress 80  |
|                 |
-------------------

node2 192.168.0.21
-------------------
| - db            | labels: 
|                 |    app: mydb
-------------------

#############################
we are using wordpressNode.yaml service for external front-end communication
we are using mysqlClusterIP.yaml service for internal back-end communication (so that it is not accessible from outside)
#############################
nano wordpressNodePort.yaml

apiVersion: v1
kind: Pod
metadata:
  name: wp
  labels:
    app: mywp
spec:
  containers:
  - name: con1
    image: wordpress:latest
    ports:
    - containerPort: 80

---
apiVersion: v1
kind: Service
metadata:
  name: wordpress-svc
spec:
  type: NodePort
  selector:
    app: mywp
  ports:
  - port: 80
    nodePort: 30123

#############################
### mysql yaml with clusterIp and pod level port enablement
nano mysqlClusterIP.yaml

apiVersion: v1
kind: Pod
metadata:
  name: mydb
  labels:
    app: mydb
spec:
  containers:
  - name: db
    image: mysql:latest
    ports:
    - containerPort: 3306
    env:
    - name: MYSQL_ROOT_PASSWORD
      value: test123
    - name: MYSQL_DATABASE
      value: wordpress

---
apiVersion: v1
kind: Service
metadata:
  name: mydb-svc
spec:
  type: ClusterIP
  selector:
    app: mydb
  ports:
  - port: 3306
#############################
##how do I know that mysql is using the port 3306?
##A: it is defined in the dockerhub.com image of mysql container documentation
# directions:
1. go to https://hub.docker.com/_/mysql
2. select a version of mysql
3. click on the dockerfile
4. and scroll down to the port it will be EXPOSE to 3306 33060

#Service is the only way to access your application within kubernetes cluster or outside of the kubernetes cluster.
it depends on the service, what type of service you are creating
e.g 
  cluster ip is for internal communcation
  loadbalancer and nodeport is for external communcation
pod level port enablement is required.

###############################################

### 1.  APPLYING THE MYSQL WITH CLUSTERIPSERVICE POD
root@master:~/app# kk create -f mysqlClusterIP.yaml
pod/mydb created
service/mydb-svc created
root@master:~/app# kkgp
NAME   READY   STATUS    RESTARTS   AGE
mydb   1/1     Running   0          6s

### 2.  APPLYING THE WORDPRESS POD
root@master:~/app# kk create -f wordpressNodePort.yaml
pod/wp created
service/wordpress-svc created
root@master:~/app#

root@master:~/app# kkg po
NAME   READY   STATUS    RESTARTS   AGE
mydb   1/1     Running   0          3m53s
wp     1/1     Running   0          57s
root@master:~/app#

### to see which nodes did the pods got deployed in 
NAME   READY   STATUS    RESTARTS   AGE     IP               NODE    NOMINATED NODE   READINESS GATES
mydb   1/1     Running   0          4m13s   172.17.166.133   node1   <none>           <none>
wp     1/1     Running   0          77s     172.17.104.5     node2   <none>           <none>
root@master:~/app#

### ON BROWSER ### 
http://192.168.29.135:30123/
Error establishing a database connection
## The error happens rarely because directly trying to communicate or connect database basically.
## so we have to put in the environmental variables in the wordpress to specify all the required environment variables. 
## how will you know the environmental variables? 
##A: it is defined in the dockerhub.com image of mysql container documentation
# directions:
1. go to https://hub.docker.com/
  a. search wordpress
2. select the official image
  a. scroll down 
4. follow the list of environmental variables requirement needed 

The following environment variables are also honored for configuring your WordPress instance (by a custom wp-config.php implementation⁠):

-e WORDPRESS_DB_HOST=...
-e WORDPRESS_DB_USER=...
-e WORDPRESS_DB_PASSWORD=...
-e WORDPRESS_DB_NAME=...
-e WORDPRESS_TABLE_PREFIX=...
-e WORDPRESS_AUTH_KEY=..., -e WORDPRESS_SECURE_AUTH_KEY=..., -e WORDPRESS_LOGGED_IN_KEY=..., -e WORDPRESS_NONCE_KEY=..., -e WORDPRESS_AUTH_SALT=..., -e WORDPRESS_SECURE_AUTH_SALT=..., -e WORDPRESS_LOGGED_IN_SALT=..., -e WORDPRESS_NONCE_SALT=... (default to unique random SHA1s, but only if other environment variable configuration is provided)
-e WORDPRESS_DEBUG=1 (defaults to disabled, non-empty value will enable WP_DEBUG in wp-config.php)
-e WORDPRESS_CONFIG_EXTRA=... (defaults to nothing, the value will be evaluated by the eval() function in wp-config.php. This variable is especially useful for applying extra configuration values this image does not provide by default such as WP_ALLOW_MULTISITE; see docker-library/wordpress#142⁠ for more details)
The WORDPRESS_DB_NAME needs to already exist on the given MySQL server; it will not be created by the wordpress container.


root@master:~/app# kubectl delete -f wordpressNodePort.yaml
pod "wp" deleted
service "wordpress-svc" deleted

root@master:~/app# nano wordpressNodePort.yaml
### if you get (ERROR establishing a database connection) for that you will have to put in the environment variables
#################### FIXED ENVIRONMENT VARIABLE FOR wordpressNodePort.yaml ####################
apiVersion: v1
kind: Pod
metadata:
  name: wp
  labels:
    app: mywp
spec:
  containers:
  - name: con1
    image: wordpress:latest
    ports:
    - containerPort: 80
    env:  #################################### values/arguments in evironmental variables are coming from what you have put inside the mysqlClusterIP.yaml environmental variables values/arguments and that is also coming from the dockerhub mysql image 
    - name: WORDPRESS_DB_HOST
      value: mydb-svc
    - name: WORDPRESS_DB_USER
      value: root
    - name: WORDPRESS_DB_PASSWORD
      value: test123
    - name: WORDPRESS_DB_NAME
      value: wordpress
    - name: WORDPRESS_TABLE_PREFIX
      value: wp_
---
apiVersion: v1
kind: Service
metadata:
  name: wordpress-svc
spec:
  type: NodePort
  selector:
    app: mywp
  ports:
  - port: 80
    nodePort: 30123

#################### FIXED ENVIRONMENT VARIABLE FOR wordpressNodePort.yaml ENDS ####################

root@master:~/app# kk create -f wordpressNodePort.yaml
pod/wp created
service/wordpress-svc created

root@master:~/app# kubectl get pod,svc
NAME       READY   STATUS    RESTARTS   AGE
pod/mydb   1/1     Running   0          6m10s
pod/wp     1/1     Running   0          6m2s

NAME                    TYPE        CLUSTER-IP      EXTERNAL-IP   PORT(S)        AGE
service/kubernetes      ClusterIP   10.96.0.1       <none>        443/TCP        35d
service/mydb-svc        ClusterIP   10.102.57.247   <none>        3306/TCP       6m10s
service/wordpress-svc   NodePort    10.106.75.235   <none>        80:30123/TCP   6m2s
root@master:~/app#

root@master:~/app# kkgp -o wide
NAME   READY   STATUS    RESTARTS   AGE   IP               NODE    NOMINATED NODE   READINESS GATES
mydb   1/1     Running   0          21m   172.17.166.133   node1   <none>           <none>
wp     1/1     Running   0          3m    172.17.104.6     node2   <none>           <none>
root@master:~/app#

### pod on node1 is having clusterIp service and pod on node2 is having Nodeport service 
### mydb is has internal service on it (clusterIP)
### wordpress has the external service on it (NodePort)
### this is the reason we can access the wordpress from outside and mydb is connected to the wordpress internally
root@master:~/app# kkg svc -o wide
NAME            TYPE        CLUSTER-IP       EXTERNAL-IP   PORT(S)        AGE    SELECTOR
kubernetes      ClusterIP   10.96.0.1        <none>        443/TCP        4d2h   <none>
mydb-svc        ClusterIP   10.103.158.244   <none>        3306/TCP       20m    app=mydb
wordpress-svc   NodePort    10.111.157.0     <none>        80:30123/TCP   119s   app=mywp
root@master:~/app#

root@master:~/app# kkgn -o wide
NAME     STATUS   ROLES           AGE     VERSION    INTERNAL-IP      EXTERNAL-IP   OS-IMAGE             KERNEL-VERSION     CONTAINER-RUNTIME
master   Ready    control-plane   4d2h    v1.28.15   192.168.29.134   <none>        Ubuntu 24.04.1 LTS   6.8.0-49-generic   cri-o://1.28.4
node1    Ready    <none>          2d18h   v1.28.15   192.168.29.135   <none>        Ubuntu 24.04.1 LTS   6.8.0-49-generic   cri-o://1.28.4
node2    Ready    <none>          27h     v1.28.15   192.168.29.136   <none>        Ubuntu 24.04.1 LTS   6.8.0-41-generic   cri-o://1.28.4


### ON BROWSER ### 
http://192.168.29.135:30123/wp-admin/install.php
Welcome
Welcome to the famous five-minute WordPress installation process! Just fill in the information below and you’ll be on your way to using the most extendable and powerful personal publishing platform in the world.

Information needed

### ON BROWSER END ### 

####  TO DELETE ALL YAML FILE MANIFEST RESOURCED IN PRESENT DIRECTORY ####
root@master:~/app# kubectl delete -f .
pod "mydb" deleted
service "mydb-svc" deleted
pod "wp" deleted
service "wordpress-svc" deleted
root@master:~/app#

steps above is how the pod to pod communication happens using cluster ip service
############################# CLUSTER IP SERVICE ENDS #############################

############################# SCHEDULING BEGINS #############################
node1 192.168.0.20
+----------+ 
|          | 
+----------+ 

node2 192.168.0.21
+----------+ 
|          |
+----------+

# if you create a pod, the Scheduler will assign that particular pod to a random node (depending on the resource the host node has)
# but if you want the scheduler to assign the pod to specific node, you will have to define it/specify the directions. 

# lets say, we have to assign the pod to node2, how to do that?
 ------
| pod  |
 ------

to do that, we will have to create a file
root@master:~/app# mkdir scheduling
root@master:~/app# cd scheduling
root@master:~/app/scheduling# 
root@master:~/app/scheduling# kubectl get nodes
NAME     STATUS   ROLES           AGE   VERSION
master   Ready    control-plane   35d   v1.28.15
node1    Ready    <none>          33d   v1.28.15
node2    Ready    <none>          32d   v1.28.15
root@master:~/app/scheduling#

nano nodename.yaml

apiVersion: v1
kind: Pod
metadata:
  name: newpod
  labels:
    app: myapp
spec:
  containers:
  - name: con1
    image: nginx:latest
    ports:
    - containerPort: 80
  nodeName: node2

root@master:~/app/scheduling# kubectl create -f nodename.yaml
pod/newpod created
root@master:~/app/scheduling#

# the pod got deployed in the node2 this time, because we specified it in the manifest file
root@master:~/app/scheduling# kubectl get pods -o wide
NAME     READY   STATUS    RESTARTS   AGE   IP              NODE    NOMINATED NODE   READINESS GATES
newpod   1/1     Running   0          98s   172.17.104.11   node2   <none>           <none>
root@master:~/app/scheduling#

root@master:~/app/scheduling# kk delete -f nodename.yaml
pod "newpod" deleted
root@master:~/app/scheduling#

# lets say if the node is unavailable the creation status will go in pending
nano nodename.yaml

apiVersion: v1
kind: Pod
metadata:
  name: newpod
  labels:
    app: myapp
spec:
  containers:
  - name: con1
    image: nginx:latest
    ports:
    - containerPort: 80
  nodeName: node10

root@master:~/app/scheduling# kubectl create -f nodename.yaml
pod/newpod created

root@master:~/app/scheduling# kubectl get pods -o wide
NAME     READY   STATUS    RESTARTS   AGE   IP       NODE     NOMINATED NODE   READINESS GATES
newpod   0/1     Pending   0          10s   <none>   node10   <none>           <none>
root@master:~/app/scheduling#

# why is it in pending state, to check that we should use describe command 
kubectl get pod newpod
...
Events:                      <none>
root@master:~/app/scheduling#

### there is no node10 available
root@master:~/app/scheduling# kubectl get nodes
NAME     STATUS   ROLES           AGE   VERSION
master   Ready    control-plane   35d   v1.28.15
node1    Ready    <none>          33d   v1.28.15
node2    Ready    <none>          32d   v1.28.15
root@master:~/app/scheduling#
# no events is happening, because such node10 itself is not available in the cluster

### in which situations we will deploy the pod to a specific node (node label)
1. a healthy node having enough resources such as cpu, memory, disk space
  cpu: 10
  ram: 128GB
  diskspace: 2TB
2. to avoid deploying pod in an unhealthy maybe in case of a node is having less cpu, memory, or disk space
  cpu: 1
  ram: 1GB
  diskspace: 5GB

# how to check similarity for similar configuration in case of specified node isnt available? 
# using key=value
# cpu=ryzen


