## we were able to achieve the high availabilty through Docker Swarm using 3 nodes
## Master node (manager/leader) and 2 worker nodes

## manager node was managing 
## in docker swarm, we were missing few of the feature. If you are creating few of the application in pods with 3 replicas in each 3 nodes.
if  container1 is failed, container2 will serve the traffic. But if somehow there is more load and if the 3 replicas are not able to serve the traffic,
then you might have monitoring tool let's say you get a mail if the cpu usage/traffic got increased. You will be logging in the node and you 
will scale up the relicas. 

Assume let's say you have created 10 containers and after sometime the traffic went down, additional containers will keep on running on the container
you will have to again log in into the docker manager and scale it down. The ability for it to scale up and scale down is missing from Docker Swarm. 
For this reason, you would use the Kubernetes feature called Auto-Scaling. 

## Kubernetes has more features compared to Docker Swarm
# configMap is used to keep the configuration at the centralized place
# if you deploy any application it gets deployed to manager/leader as well but in kubernetes you can turn on or turn off this feature.
# there are lot's of features missing from Docker Swarm compared to Kubernetes

## multi-flavors of kubernetes:
On-prem
managed k8s
AWS --> EKS Elastic Kubernetes Service
GCP --> GKE Google Kubernetes Engine
Azure --> AKS Azure Kubernetes Service
# the difference would be with clustrter creations, because their cloud provider are having different user interfaces. Their looks and dashboard would be different
and cluster creation method would be different. 

to achieve high availabilty on-prem you will have to deploy the multiple Master node and these nodes would be managed by you only for high availability and similarly,
you would have to create multiple worker nodes. These master nodes will not be getting your deployment. Master node will not have your application deployed,
you will have the application deployed in worker and you would need a special admin to make sure it is always up and running which is a down side of On-Prem kubernetes, 
that is why you need managed kubernetes cloud provides. 


------------------------------------------------------------------------------------
some topics object to learn in our session:
Deployment
Satefulset
ConfigMap
Secrets
------------------------------------------------------------------------------------


You can define 
min-3 
or 
max-10 

You are responsible for upgrading/updating the kubernetes on-prem. If you are not updating/upgrading the On-Prem Kubernetes, you will be seeing deprecated work in kubernetes.

If you are not updating kuberenetes on Cloud version will have getting expired and if you are not updating the, your master node will automatically gets updated.
Auto-Upgradation feature is for Cloud-providers.

On-Premise depends on platform like linux, you will have to be executing commands like adding a user and then you will have to add RBAC
------------------------------------------------------------------------------------
RBAC: role based access control
on-prem
linux - adduser role/cluster-role role-bindling/cluster-rolebinding

cloud
aws-create user from IAM
GCP- IAM
AZURE-activedirectory with IAM
------------------------------------------------------------------------------------

