Role based access control, 
in our cluster we can create namespaces. 
In our cluster, we have different application teams and everyone is working on different applications. It is not possible for me to give seperate cluster for each of the teams.
I dont want to give them five different servers for the dev environment or UAT etc. So, what I will do is I will create in my cluster a logical space. So that each team can have the access to that logcial space. 


----------------------
| Dev | UAT | app-POC|
|     |     |        |
|     |     |        |
----------------------

So, how we can create these logical spaces? we are already having logical spaces like namespaces in our cluster. 
but with RBAC you get much more capabilities

lets check the namespaces in k8s
root@master:~/app/network# kubectl get ns
NAME                 STATUS   AGE
default              Active   55d
kube-node-lease      Active   55d
kube-public          Active   55d
kube-system          Active   55d
local-path-storage   Active   7d9h
root@master:~/app/network#

root@master:~/app/network# kubectl get pods -n kube-system
NAME                                       READY   STATUS    RESTARTS        AGE
calico-kube-controllers-787f445f84-gdc7t   1/1     Running   5               52d
calico-node-mrm6j                          1/1     Running   4               52d
calico-node-vhd49                          1/1     Running   5               52d
calico-node-x4q65                          1/1     Running   4               52d
coredns-5dd5756b68-84w4t                   1/1     Running   8               55d
coredns-5dd5756b68-m64mp                   1/1     Running   8               55d
etcd-master                                1/1     Running   8               55d
kube-apiserver-master                      1/1     Running   8               55d
kube-controller-manager-master             1/1     Running   14 (5d6h ago)   55d
kube-proxy-k4pzl                           1/1     Running   8               55d
kube-proxy-k88rh                           1/1     Running   5               53d
kube-proxy-sr6kt                           1/1     Running   5               52d
kube-scheduler-master                      1/1     Running   14 (9d ago)     55d
metrics-server-58ff449c8d-bch5w            1/1     Running   0               12d
root@master:~/app/network#


root@master:~/app/rbac# kubectl get namespaces
NAME                 STATUS   AGE
default              Active   55d
kube-node-lease      Active   55d
kube-public          Active   55d
kube-system          Active   55d  <----### this namespace contains system pods running you can see below.
local-path-storage   Active   7d11h
root@master:~/app/rbac#

###this namespace contains system pods running you can see below.
root@master:~/app/rbac# kubectl get pods -n kube-system
NAME                                       READY   STATUS    RESTARTS        AGE
calico-kube-controllers-787f445f84-gdc7t   1/1     Running   5               52d
calico-node-mrm6j                          1/1     Running   4               52d
calico-node-vhd49                          1/1     Running   5               52d
calico-node-x4q65                          1/1     Running   4               52d
coredns-5dd5756b68-84w4t                   1/1     Running   8               55d
coredns-5dd5756b68-m64mp                   1/1     Running   8               55d
etcd-master                                1/1     Running   8               55d
kube-apiserver-master                      1/1     Running   8               55d
kube-controller-manager-master             1/1     Running   14 (5d8h ago)   55d
kube-proxy-k4pzl                           1/1     Running   8               55d
kube-proxy-k88rh                           1/1     Running   5               53d
kube-proxy-sr6kt                           1/1     Running   5               52d
kube-scheduler-master                      1/1     Running   14 (9d ago)     55d
metrics-server-58ff449c8d-bch5w            1/1     Running   0               12d
root@master:~/app/rbac#

###you can create your own namespace for your team members
root@master:~/app/rbac# kubectl create namespace devops --dry-run=client -o yaml
apiVersion: v1
kind: Namespace
metadata:
  creationTimestamp: null
  name: devops
spec: {}
status: {}
root@master:~/app/rbac#

root@master:~/app/rbac# kubectl create namespace devops
namespace/devops created
root@master:~/app/rbac# kubectl get ns
NAME                 STATUS   AGE
default              Active   55d
devops               Active   7s
kube-node-lease      Active   55d
kube-public          Active   55d
kube-system          Active   55d
local-path-storage   Active   8d
root@master:~/app/rbac#

### to see what are the things running in your namespace:
root@master:~/app/rbac# kubectl get all -n devops
No resources found in devops namespace.
root@master:~/app/rbac#

### important things are no resource quote and No limitRange resource
root@master:~/app/rbac# kubectl describe namespaces devops
Name:         devops
Labels:       kubernetes.io/metadata.name=devops
Annotations:  <none>
Status:       Active

No resource quota.  

No LimitRange resource.
root@master:~/app/rbac#

###Interview question:
what is resource quota and limit range?
Resource quote is something


----------------------
| Dev | UAT | app-POC|
|     |     |        |
|     |     |        |
----------------------

###### IMPORTANT:
RESOURCE QUOTA:
assume that above is my cluster.
in this cluster, im having 24 gb rams and 20 cpu. You can distribute/dividing these resources to different namespaces and this called a limit quota.
Lets's suppose I want to limit the Dev namespace to be using not more then 10gb ram and more then 5 cpu and etc and UAT namespace some different resource limitation and app-POC namespace different limitation.
This is how we limit the resources based per the name space in the cluster. 
--------------------------
| Dev    | UAT | app-POC|
|ram10GB |     |        |
|cpu5    |     |        | 
|deploy=5|     |        |
|pods=20 |     |        |
|PV=5    |     |        |
--------------------------
###### IMPORTANT:
LIMIT RANGE:
assume that we are having careless people working in our team, who are deploying the application without configuring minimum and maximum resources to the pods or deployments.
Those people are not difining the resource configuration in the manifest in the yaml file. We can implement the limit range. If any one is not deploying their pod with minimum and 
maximum cpu and memory resources logic in their yaml file; then limit range will be adding by default to their pod. 

### if you see below, we havent defined the limitation to our resources, yet the k8s allowed the resources to be created.
root@master:~/app/rbac# kubectl run test --image nginx --port 80 -n devops
pod/test created
root@master:~/app/rbac# kubectl -n devops get pod
NAME   READY   STATUS    RESTARTS   AGE
test   1/1     Running   0          16s
root@master:~/app/rbac#
root@master:~/app/rbac# kubectl -n devops describe pod test
...
Containers:
  test:
    Container ID:   cri-o://f4b4bf102c465f511617e6b3b91142ba1d2f47b186f5def19dfa659e1d3bf960
    Image:          nginx
    Image ID:       docker.io/library/nginx@sha256:42e917aaa1b5bb40dd0f6f7f4f857490ac7747d7ef73b391c774a41a8b994f15
    Port:           80/TCP
    Host Port:      0/TCP
    State:          Running
      Started:      Sun, 12 Jan 2025 10:12:31 -0500
    Ready:          True
    Restart Count:  0
    Environment:    <none>
    Mounts:
      /var/run/secrets/kubernetes.io/serviceaccount from kube-api-access-tjs9h (ro)
Conditions:
...

========== LIMIT RANGE ========== 
root@master:~/app/rbac# nano limitrange.yaml
### Let's implement the limit range
apiVersion: v1
kind: LimitRange
metadata:
  name: cpu-resource-constraint
  namespace: devops
spec:
  limits:
  - default: # this section defines default limits
      cpu: "300m"
      memory: "256Mi"
    defaultRequest: # this section defines default requests
      cpu: 100m
      memory: "64Mi"
    max: # max and min define the limit range
      cpu: "1"
    min:
      cpu: 100m
    type: Container

root@master:~/app/rbac# kubectl create -f limitrange.yaml
limitrange/cpu-resource-constraint created

root@master:~/app/rbac# kubectl describe ns devops
Name:         devops
Labels:       kubernetes.io/metadata.name=devops
Annotations:  <none>
Status:       Active

No resource quota.

Resource Limits
 Type       Resource  Min   Max  Default Request  Default Limit  Max Limit/Request Ratio
 ----       --------  ---   ---  ---------------  -------------  -----------------------
 Container  cpu       100m  1    100m             300m           -
 Container  memory    -     -    64Mi             256Mi          -
root@master:~/app/rbac#

### Now create a pod in devops namespace wihtout the resource and you will see in describe section that limitation to the 
# create it imperative way or declarative way, if there will be no resource cpu memory limitation logic added, the resource quota will automatically apply the limitation to the pod/deployment
root@master:~/app/rbac# kubectl run newpod --image nginx --port 80 -n devops
pod/newpod created

root@master:~/app/rbac# kubectl -n devops get pods
NAME     READY   STATUS    RESTARTS   AGE
newpod   1/1     Running   0          17s
test     1/1     Running   0          39m
root@master:~/app/rbac#

root@master:~/app/rbac# kubectl -n devops describe pod newpod
...
 Containers:
  newpod:
    Container ID:   cri-o://7a17b80ee2600048a5488c8ece3b0411a3656acf0b62c930b54beb7e3fc7c27d
    Image:          nginx
    Image ID:       docker.io/library/nginx@sha256:42e917aaa1b5bb40dd0f6f7f4f857490ac7747d7ef73b391c774a41a8b994f15
    Port:           80/TCP
    Host Port:      0/TCP
    State:          Running
      Started:      Sun, 12 Jan 2025 10:51:47 -0500
    Ready:          True
    Restart Count:  0
     Limits:            <-------------------------------------- IMPORTANT: you see, though we didnt add the resource limitation in our command; the resource limitation was added through our limtation quota configration for our name space
      cpu:     300m      <-----------------
      memory:  256Mi      <-----------------
    Requests:            <-----------------
      cpu:        100m    <-----------------
      memory:     64Mi    <-----------------
    Environment:  <none>
    Mounts:
...

### you need to create a pod with yaml file with adding the resources limitation, whatver you put in yaml file will have more priority. 
apiVersion: v1
kind: Pod
metadata:
  name: devops
  labels:
    app: myapp
spec:
  containers:
  - name: con1
    image: nginx:latest
    ports:
    - containerPort: 80
    resources:
      requests: #e.g 1GB memory    # minimum request to the resources on a node (if my node doesnt have 1gb, then it will not be deployed on th>        memory: "64Mi"
        cpu: "100m"
      limits: #e.g 2GB memory    # maximum limit to the resources pod can have access from a node
        memory: "1024Mi"
        cpu: "500m" #1000 mili cpu is equals to 1 cpu
    livenessProbe:
      httpGet: # because nginx is webserver, so use the http probe
        path: /test.html #ERROR because the /test.html doesnt exist
        port: 80
      initialDelaySeconds: 5
      periodSeconds: 5 # every 5 second perform the probeCheck

root@master:~/app/rbac# kubectl -n devops create -f pod.yaml
pod/devops created

root@master:~/app/rbac# kubectl -n devops get pods
NAME     READY   STATUS    RESTARTS   AGE
devops   1/1     Running   0          10s
newpod   1/1     Running   0          19m
test     1/1     Running   0          59m
root@master:~/app/rbac# kubectl describe pod devops -n devops
...
  con1:
    Container ID:   cri-o://06666391a6a4b94f7ba2f9b0b4265b2348d9b553a611e55fad059cb76704818a
    Image:          nginx:latest
    Image ID:       docker.io/library/nginx@sha256:42e917aaa1b5bb40dd0f6f7f4f857490ac7747d7ef73b391c774a41a8b994f15
    Port:           80/TCP
    Host Port:      0/TCP
    State:          Running
      Started:      Sun, 12 Jan 2025 11:12:09 -0500
    Last State:     Terminated
      Reason:       Completed
      Exit Code:    0
      Started:      Sun, 12 Jan 2025 11:11:49 -0500
      Finished:     Sun, 12 Jan 2025 11:12:08 -0500
    Ready:          True
    Restart Count:  2
    Limits:
      cpu:     500m
      memory:  1Gi
    Requests:
      cpu:        100m
      memory:     64Mi
    Liveness:     http-get http://:80/test.html delay=5s timeout=1s period=5s #success=1 #failure=3
    Environment:  <none>
    Mounts:
...

root@master:~/app/rbac# kubectl describe ns devops
Name:         devops
Labels:       kubernetes.io/metadata.name=devops
Annotations:  <none>
Status:       Active

No resource quota.

Resource Limits
 Type       Resource  Min   Max  Default Request  Default Limit  Max Limit/Request Ratio
 ----       --------  ---   ---  ---------------  -------------  -----------------------
 Container  cpu       100m  1    100m             300m           -
 Container  memory    -     -    64Mi             256Mi          -
root@master:~/app/rbac#


============== RESOURCE QUOTA ============== 
### Let's implement the resource quota
# go through this document and read Object Count Quota
https://kubernetes.io/docs/concepts/policy/resource-quotas/#object-count-quota

### Lets create a resource quota 
root@master:~/app/rbac# nano resource-quota.yaml
apiVersion: v1
kind: ResourceQuota
metadata:
  name: compute-resources
spec:
  hard:
    requests.cpu: "1"
    requests.memory: 1Gi
    limits.cpu: "2"
    limits.memory: 2Gi
    configmaps: "10"
    persistentvolumeclaims: "4"
    pods: "8"
    replicationcontrollers: "20" #if you are defining this many RC but only out of 20 you will create 8 pods and 13 will be going into pending state
    secrets: "10"
    services: "10"
    services.loadbalancers: "2"

root@master:~/app/rbac# kubectl create -f resource-quota.yaml -n devops
resourcequota/compute-resources created
root@master:~/app/rbac#

root@master:~/app/rbac# kubectl describe ns devops
Name:         devops
Labels:       kubernetes.io/metadata.name=devops
Annotations:  <none>
Status:       Active

### you can see below the RESOURCE QUOTAS has been implemented 
Resource Quotas      <-----------------------------------------------------------------
  Name:                   compute-resources
  Resource                Used    Hard
  --------                ---     ---
  configmaps              1       10    <--------------
  limits.cpu              800m    2     <--------------
  limits.memory           1280Mi  2Gi   <--------------
  persistentvolumeclaims  0       4     <--------------
  pods                    3       8     <--------------
  replicationcontrollers  0       20    <--------------
  requests.cpu            200m    1     <--------------
  requests.memory         128Mi   1Gi   <--------------
  secrets                 0       10    <--------------
  services                0       10    <--------------
  services.loadbalancers  0       2     <--------------

Resource Limits
 Type       Resource  Min   Max  Default Request  Default Limit  Max Limit/Request Ratio
 ----       --------  ---   ---  ---------------  -------------  -----------------------
 Container  cpu       100m  1    100m             300m           -
 Container  memory    -     -    64Mi             256Mi          -
root@master:~/app/rbac#

### Important
if you implemeneted resource quota and you didnt created the resource limit, in this situation it will try to create any deployment pod without defining
the resource min max on container level it will not allow to create a pod. It will throw the Error. To avoid this, implement the LIMIT RANGE first or define 
RESOURCES in your yaml file. 

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
######################################## RBAC ######################################## 
CLUSTER ROLE AND CLUSTERROLEBINDING
### INTERVIEW QUESTION:
Theoratical:
Role                     -- RoleBinding (role + user/service-account/group) # role which needs to be binded to a user or service account or group with a role.
permissions on objects
Role is a combination of the Verb and resources
Verbs: operations you can perform
Edit,delete,update,list,patch

resources: list of k8s objects
pods,deployment.configmaps,secrets


ClusterRole -- ClusterRoleBinding # a role which is having cluster level access. A role which is having cluster level access. A role which can look into another people's namespace. A complete cluster access. 
# such role if you are binding with a user or ___? is called cluster role binding. If you want to allow user to give cluster level access, then implement cluster clusterrolebinding. If you want to give the 
access to the user based on the name space alone that implement role and the rolebinding.   

What is a role? 
a role is nothing but a permission set on the object.


root@master:~# kubectl create role devrole --resource pods,secrets,deployment --verb create,update,delete,list,get -n devops --dry-run=client -o yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  creationTimestamp: null
  name: devrole
  namespace: devops
rules:
- apiGroups:
  - ""
  resources:
  - pods
  - secrets
  verbs:
  - create
  - update
  - delete
  - list
  - get
- apiGroups:
  - apps
  resources:
  - deployments
  verbs:
  - create
  - update
  - delete
  - list
  - get
root@master:~#

root@master:~/app/rbac# kubectl create role devrole --resource pods,secrets,deployment --verb create,update,delete,list,get -n devops --dry-run=client -o yaml > devrole.yaml
root@master:~/app/rbac# ls
devrole.yaml  limitrange.yaml  pod.yaml  resource-quota.yaml
root@master:~/app/rbac#

root@master:~/app/rbac# kubectl create -f devrole.yaml
role.rbac.authorization.k8s.io/devrole created
root@master:~/app/rbac#

root@master:~/app/rbac# kubectl get role -n devops
NAME      CREATED AT
devrole   2025-01-15T21:51:32Z
root@master:~/app/rbac# kubectl get role -n devops ^C
root@master:~/app/rbac# kubectl -n devops describe role devrole
Name:         devrole
Labels:       <none>
Annotations:  <none>
PolicyRule:
  Resources         Non-Resource URLs  Resource Names  Verbs
  ---------         -----------------  --------------  -----
  pods              []                 []              [create update delete list get]
  secrets           []                 []              [create update delete list get]
  deployments.apps  []                 []              [create update delete list get]
root@master:~/app/rbac#
root@master:~/app/rbac#

### we want to bind this role to the user. 
root@master:~/app/rbac# adduser aneesh
info: Adding user `aneesh' ...
info: Selecting UID/GID from range 1000 to 59999 ...
info: Adding new group `aneesh' (1001) ...
info: Adding new user `aneesh' (1001) with group `aneesh (1001)' ...
info: Creating home directory `/home/aneesh' ...
info: Copying files from `/etc/skel' ...
New password:
BAD PASSWORD: The password is shorter than 8 characters
Retype new password:
passwd: password updated successfully
Changing the user information for aneesh
Enter the new value, or press ENTER for the default
        Full Name []: aneesh
        Room Number []: 1
        Work Phone []: 1
        Home Phone []: 1
        Other []: 1
Is the information correct? [Y/n] y
info: Adding new user `aneesh' to supplemental / extra groups `users' ...
info: Adding user `aneesh' to group `users' ...
root@master:~/app/rbac#


root@master:~/app/rbac# kubectl create -n devops rolebinding devrolebind --role devrole --user aneesh --dry-run=client -o yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  creationTimestamp: null
  name: devrolebind
  namespace: devops
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: devrole
subjects:
- apiGroup: rbac.authorization.k8s.io
  kind: User
  name: aneesh
root@master:~/app/rbac#

root@master:~/app/rbac# kubectl create -n devops rolebinding devrolebind --role devrole --user aneesh --dry-run=client -o yaml > rolebind.yaml
root@master:~/app/rbac#

### add the name space in the yaml file
root@master:~/app/rbac# nano rolebind.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  creationTimestamp: null
  name: devrolebind
  namespace: devops
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: devrole
subjects:
- apiGroup: rbac.authorization.k8s.io
  kind: User
  name: aneesh

root@master:~/app/rbac# kubectl create -f rolebind.yaml
rolebinding.rbac.authorization.k8s.io/devrolebind created
root@master:~/app/rbac# kubectl get rolebindings.rbac.authorization.k8s.io -n devops
NAME          ROLE           AGE
devrolebind   Role/devrole   18s
root@master:~/app/rbac#

root@master:~/app/rbac# kubectl -n devops describe rolebindings.rbac.authorization.k8s.io devrolebind
Name:         devrolebind
Labels:       <none>
Annotations:  <none>
Role:
  Kind:  Role
  Name:  devrole
Subjects:
  Kind  Name    Namespace
  ----  ----    ---------
  User  aneesh          <-------------  # not sure, because I did define it it in the yaml file. 
root@master:~/app/rbac#
### not definind the namespace above 

### if you try to login from the user aneesh and try to authenticate the 
### need to trouble shoot this point 
aneesh@master:~$ kubectl get pod -n devops
E0115 17:03:10.323517  172919 memcache.go:265] couldn't get current server API group list: Get "http://localhost:8080/api?timeout=32s": dial tcp 127.0.0.1:8080: connect: connection refused
E0115 17:03:10.325211  172919 memcache.go:265] couldn't get current server API group list: Get "http://localhost:8080/api?timeout=32s": dial tcp 127.0.0.1:8080: connect: connection refused
E0115 17:03:10.327981  172919 memcache.go:265] couldn't get current server API group list: Get "http://localhost:8080/api?timeout=32s": dial tcp 127.0.0.1:8080: connect: connection refused
E0115 17:03:10.328704  172919 memcache.go:265] couldn't get current server API group list: Get "http://localhost:8080/api?timeout=32s": dial tcp 127.0.0.1:8080: connect: connection refused
E0115 17:03:10.330403  172919 memcache.go:265] couldn't get current server API group list: Get "http://localhost:8080/api?timeout=32s": dial tcp 127.0.0.1:8080: connect: connection refused
The connection to the server localhost:8080 was refused - did you specify the right host or port?
aneesh@master:~$




### IMPORTANT: it is simple to define the rolebinding through imperateive way. Try to define the role binding through the imperative way rather than defining it in the yaml file.

### if it is the cloud k8s, how will I add the user? Use the IAM in AWS and create it programmatically. Once the user is created, then list the system pod 
kubectl get pod -n kube-system
there will be a pod running called O-Auth in that O-Auth pod you will define the ARN of the user name. That when you try to access/implement it, you will be able to access based on the cluster role. 
https://docs.aws.amazon.com/eks/latest/userguide/auth-configmap.html
