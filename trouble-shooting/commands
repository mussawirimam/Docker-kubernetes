kubectl top 

kubectl describe <resource e.g pod or node> <pod/node name>
e.g kubectl describe pod wordpress

kubectl logs -n kube-system <kube-system pod name>:
kubectl logs -n kube-system kube-apiserver-master
kubectl get clusterrolebinding calico-kube-controllers

### To print the token on master node so that the worker node can join ###
root@master:~/app# kubeadm token create --print-join-command
kubeadm join 192.168.29.134:6443 --token m5kXXX.xxxxxxxxxxxx --discovery-token-ca-cert-hash sha256:XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX

####  journalctl - Print log entries from the systemd journal ####
journalctl -u 
e.g journalctl -u kubelet
e.g journalctl -u crio or containerd


### to get all the namespace that exist on k8s cluster ###
root@master:~/app# kubectl get namespace
NAME              STATUS   AGE
default           Active   3d1h
kube-node-lease   Active   3d1h
kube-public       Active   3d1h
kube-system       Active   3d1h
root@master:~/app#

root@master:~/app# kubectl describe namespaces kube-system
Name:         kube-system
Labels:       kubernetes.io/metadata.name=kube-system
Annotations:  <none>
Status:       Active

No resource quota.
No LimitRange resource.

root@master:~/app# kubectl cluster-info
Kubernetes control plane is running at https://192.168.29.134:6443
CoreDNS is running at https://192.168.29.134:6443/api/v1/namespaces/kube-system/services/kube-dns:dns/proxy

To further debug and diagnose cluster problems, use 'kubectl cluster-info dump'.
root@master:~/app#

#### Crio ####
root@master:~/app# crio
INFO[2024-11-20 19:50:14.736974535-05:00] Starting CRI-O, version: 1.28.4, git: unknown(clean)
INFO[2024-11-20 19:50:14.754010786-05:00] Node configuration value for hugetlb cgroup is true
INFO[2024-11-20 19:50:14.754159461-05:00] Node configuration value for pid cgroup is true
INFO[2024-11-20 19:50:14.754299064-05:00] Node configuration value for memoryswap cgroup is true
INFO[2024-11-20 19:50:14.754315067-05:00] Node configuration value for cgroup v2 is true
INFO[2024-11-20 19:50:14.795439755-05:00] Node configuration value for systemd CollectMode is true
INFO[2024-11-20 19:50:14.810897661-05:00] Node configuration value for systemd AllowedCPUs is true
INFO[2024-11-20 19:50:14.813371664-05:00] Not using native diff for overlay, this may cause degraded performance for building images: kernel has CONFIG_OVERLAY_FS_REDIRECT_DIR enabled
INFO[2024-11-20 19:50:14.819339384-05:00] Using default capabilities: CAP_CHOWN, CAP_DAC_OVERRIDE, CAP_FSETID, CAP_FOWNER, CAP_SETGID, CAP_SETUID, CAP_SETPCAP, CAP_NET_BIND_SERVICE, CAP_KILL
INFO[2024-11-20 19:50:14.861358154-05:00] Checkpoint/restore support disabled
INFO[2024-11-20 19:50:14.861469208-05:00] Using seccomp default profile when unspecified: true
INFO[2024-11-20 19:50:14.861489881-05:00] Using the internal default seccomp profile
INFO[2024-11-20 19:50:14.861507407-05:00] Installing default AppArmor profile: crio-default
INFO[2024-11-20 19:50:14.955753345-05:00] No blockio config file specified, blockio not configured
INFO[2024-11-20 19:50:14.955831877-05:00] RDT not available in the host system
INFO[2024-11-20 19:50:14.962264917-05:00] Conmon does support the --sync option
INFO[2024-11-20 19:50:14.962993923-05:00] Conmon does support the --log-global-size-max option
INFO[2024-11-20 19:50:15.095711453-05:00] Found CNI network k8s-pod-network (type=calico) at /etc/cni/net.d/10-calico.conflist
INFO[2024-11-20 19:50:15.127012061-05:00] Found CNI network crio (type=bridge) at /etc/cni/net.d/100-crio-bridge.conflist
INFO[2024-11-20 19:50:15.149533760-05:00] Found CNI network loopback (type=loopback) at /etc/cni/net.d/200-loopback.conflist
INFO[2024-11-20 19:50:15.149729398-05:00] Updated default CNI network name to k8s-pod-network
FATA[2024-11-20 19:50:15.151408627-05:00] validating api config: already existing connection on /var/run/crio/crio.sock

#### To check the image list of ####
crictl images 
root@master:~/app# crictl images
IMAGE                                     TAG                 IMAGE ID            SIZE
docker.io/calico/cni                      v3.25.0             d70a5947d57e5       198MB
docker.io/calico/cni                      v3.27.3             6527a35581401       196MB
docker.io/calico/kube-controllers         v3.27.3             3e4fd05c0c1c0       75.7MB
docker.io/calico/node                     v3.25.0             08616d26b8e74       247MB
docker.io/calico/node                     v3.27.3             5c6ffd2b2a1d0       340MB
registry.k8s.io/coredns/coredns           v1.10.1             ead0a4a53df89       53.6MB
registry.k8s.io/etcd                      3.5.15-0            2e96e5913fc06       149MB
registry.k8s.io/kube-apiserver            v1.28.15            9dc6939e7c573       126MB
registry.k8s.io/kube-controller-manager   v1.28.15            10541d8af03f4       122MB
registry.k8s.io/kube-proxy                v1.28.15            ba6d7f8bc25be       83MB
registry.k8s.io/kube-scheduler            v1.28.15            9d3465f8477c6       60.3MB
registry.k8s.io/pause                     3.9                 e6f1816883972       750kB
root@master:~/app#

#### in containerd 
ctr images list

root@master:~/app# kubectl get pod wordpress -o yaml # to check where the image is being pulled from and more

kubectl delete -f https://docs.projectcalico.org/manifests/calico.yaml
kubectl apply -f https://docs.projectcalico.org/manifests/calico.yaml



#### kubectl can be a good tool for trouble-shooting because it shows the list of commands that you can use to connect next argument/-flag ####
root@master:~/app# kubectl
kubectl controls the Kubernetes cluster manager.

 Find more information at: https://kubernetes.io/docs/reference/kubectl/

Basic Commands (Beginner):
  create          Create a resource from a file or from stdin
  expose          Take a replication controller, service, deployment or pod and expose it as a new Kubernetes service
  run             Run a particular image on the cluster
  set             Set specific features on objects

Basic Commands (Intermediate):
  explain         Get documentation for a resource
  get             Display one or many resources
  edit            Edit a resource on the server
  delete          Delete resources by file names, stdin, resources and names, or by resources and label selector

Deploy Commands:
  rollout         Manage the rollout of a resource
  scale           Set a new size for a deployment, replica set, or replication controller
  autoscale       Auto-scale a deployment, replica set, stateful set, or replication controller

Cluster Management Commands:
  certificate     Modify certificate resources
  cluster-info    Display cluster information
  top             Display resource (CPU/memory) usage
  cordon          Mark node as unschedulable
  uncordon        Mark node as schedulable
  drain           Drain node in preparation for maintenance
  taint           Update the taints on one or more nodes

Troubleshooting and Debugging Commands:
  describe        Show details of a specific resource or group of resources
  logs            Print the logs for a container in a pod
  attach          Attach to a running container
  exec            Execute a command in a container
  port-forward    Forward one or more local ports to a pod
  proxy           Run a proxy to the Kubernetes API server
  cp              Copy files and directories to and from containers
  auth            Inspect authorization
  debug           Create debugging sessions for troubleshooting workloads and nodes
  events          List events

Advanced Commands:
  diff            Diff the live version against a would-be applied version
  apply           Apply a configuration to a resource by file name or stdin
  patch           Update fields of a resource
  replace         Replace a resource by file name or stdin
  wait            Experimental: Wait for a specific condition on one or many resources
  kustomize       Build a kustomization target from a directory or URL

Settings Commands:
  label           Update the labels on a resource
  annotate        Update the annotations on a resource
  completion      Output shell completion code for the specified shell (bash, zsh, fish, or powershell)

Other Commands:
  api-resources   Print the supported API resources on the server
  api-versions    Print the supported API versions on the server, in the form of "group/version"
  config          Modify kubeconfig files
  plugin          Provides utilities for interacting with plugins
  version         Print the client and server version information

Usage:
  kubectl [flags] [options]

Use "kubectl <command> --help" for more information about a given command.
Use "kubectl options" for a list of global command-line options (applies to all commands).
root@master:~/app#
