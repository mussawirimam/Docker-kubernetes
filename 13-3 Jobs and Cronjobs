################## JOBS ##################

### generally let's say you want to perform a repetative task, we will be using the jobs.
# jobs/cron are used to perform some of the housekeeping activity. Let's say you want to push or pull the data from somewhere
# other places, you will use the jobs

controlplane $ nano job.yaml
apiVersion: batch/v1
kind: Job
metadata:
  name: pi
spec:
  completions: 10  <--------- executed with 10 times in 10 seperated pod and pod status will change to completed 
  parallelism: 2   <--------- I want to do it super quickly in parallely multiple container
  template:
    spec:
      containers:
      - name: pi
        image: perl:5.34.0
        command: ["perl",  "-Mbignum=bpi", "-wle", "print bpi(2000)"]
      restartPolicy: Never

controlplane $ kubectl create -f job.yaml
job.batch/pi created
controlplane $ kubectl get jobs.batch 
NAME   STATUS    COMPLETIONS   DURATION   AGE
pi     Running   0/10          5s         5s
controlplane $ kubectl get pods
NAME         READY   STATUS              RESTARTS   AGE
pi-tvd5j     0/1     ContainerCreating   0          11s
pi-w9695     0/1     ContainerCreating   0          11s
secret-vol   1/1     Running             0          29m
controlplane $ kubectl get pods
NAME         READY   STATUS              RESTARTS   AGE
pi-tvd5j     0/1     ContainerCreating   0          18s
pi-w9695     0/1     ContainerCreating   0          18s
secret-vol   1/1     Running             0          29m
controlplane $ kubectl get pods --watch
NAME         READY   STATUS              RESTARTS   AGE
pi-tvd5j     0/1     ContainerCreating   0          22s
pi-w9695     0/1     ContainerCreating   0          22s
secret-vol   1/1     Running             0          29m
pi-tvd5j     1/1     Running             0          26s
pi-w9695     1/1     Running             0          27s

### once the job is completed the pods will remain there, once the job is completed you can remove these pods above.

--------------------------------------------------------------------------------------------------------------
################## CRONJOBS ##################
### linux follow set of rules to set up the cronjobs, you need to see for the examples below. 
#remember the five stars 
* * * * *   /path/to/script.sh (Command/Script to Execute)
| | | | |-----5th star is DayOfWeek (0-7) 0,7 are "Sunday"
| | | |----4th star is Month of Year (1-12)  
| | |---3rd star is Day of Month (1-31)
| |--2nd star is hour (0-23) 
|-1st star is minute (0-59)

Cronjob examples: https://crontab.guru/examples.html

controlplane $ nano cronjob.yaml
apiVersion: batch/v1
kind: CronJob
metadata:
  name: hello
spec:
  schedule: "* * * * *"
  jobTemplate:
    spec:
      template:
        spec:
          containers:
          - name: hello
            image: busybox:1.28
            imagePullPolicy: IfNotPresent
            command:
            - /bin/sh
            - -c
            - date; echo Hello from the Kubernetes cluster
          restartPolicy: OnFailure


controlplane $ kubectl create -f cronjob.yaml 
cronjob.batch/hello created

### Default time zone of the cronjob is the UTC time zone
### For CronJobs with no time zone specified, the kube-controller-manager interprets schedules relative to its local time zone.
### You can specify a time zone for a CronJob by setting .spec.timeZone to the name of a valid time zone. For example, setting .spec.timeZone: "Etc/UTC" instructs Kubernetes to interpret the schedule relative to Coordinated Universal Time
### https://kubernetes.io/docs/concepts/workloads/controllers/cron-jobs/ > find: timezone section
controlplane $ kubectl get cronjobs.batch 
NAME    SCHEDULE    TIMEZONE   SUSPEND   ACTIVE   LAST SCHEDULE   AGE
hello   * * * * *   <none>     False     0        <none>          8s
controlplane $ 
