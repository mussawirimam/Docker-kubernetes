### im having multiple applications running in my cluster and a database
these application uses backend database. I can create a networking rule, which says that who can talk to these application
we will learn a simple networking rule implementation. Based on the labels, the network policies will be implemented 
pods 
----
app1
app2
DB

root@master:~/app# cp wordpressNodePort.yaml network/
root@master:~/app# cp mysqlClusterIP.yaml network/
root@master:~/app# cd network/
root@master:~/app/network# cp wordpressNodePort.yaml wordpressNodePort-2.yaml
root@master:~/app/network# ls
mysqlClusterIP.yaml  wordpressNodePort-2.yaml  wordpressNodePort.yaml
root@master:~/app/network#
root@master:~/app/network# nano wordpressNodePort.yaml

apiVersion: v1
kind: Pod
metadata:
  name: wp-1
  labels:
    app: mywp-1
spec:
  containers:
  - name: con1
    image: wordpress:latest
    ports:
    - containerPort: 80
    env:
    - name: WORDPRESS_DB_HOST
      value: mydb-svc
    - name: WORDPRESS_DB_USER
      value: root
    - name: WORDPRESS_DB_PASSWORD
      value: test123
    - name: WORDPRESS_DB_NAME
      value: wordpress
    - name: WORDPRESS_TABLE_PREFIX
      value: wp_
---
apiVersion: v1
kind: Service
metadata:
  name: wordpress-svc-1
spec:
  type: NodePort
  selector:
    app: mywp1
  ports:
  - port: 80
    nodePort: 30123
    
root@master:~/app/network#
root@master:~/app/network# cp wordpressNodePort.yaml wordpressNodePort-2.yaml
root@master:~/app/network# ls
wordpressNodePort-2.yaml  wordpressNodePort.yaml
root@master:~/app/network#

root@master:~/app/network# cat wordpressNodePort-2.yaml
apiVersion: v1
kind: Pod
metadata:
  name: wp2
  labels:
    app: mywp2
spec:
  containers:
  - name: con2
    image: wordpress:latest
    ports:
    - containerPort: 80
    env:
    - name: WORDPRESS_DB_HOST
      value: mydb-svc
    - name: WORDPRESS_DB_USER
      value: root
    - name: WORDPRESS_DB_PASSWORD
      value: test123
    - name: WORDPRESS_DB_NAME
      value: wordpress
    - name: WORDPRESS_TABLE_PREFIX
      value: wp2_
---
apiVersion: v1
kind: Service
metadata:
  name: wordpress-svc-2
spec:
  type: NodePort
  selector:
    app: mywp2
  ports:
  - port: 80
    nodePort: 30124

root@master:~/app/network#

root@master:~/app# nano mysqlClusterIP.yaml

apiVersion: v1
kind: Pod
metadata:
  name: mydb
  labels:
    app: mydb
spec:
  containers:
  - name: db
    image: mysql:latest
    ports:
    - containerPort: 3306
    env:
    - name: MYSQL_ROOT_PASSWORD
      value: test123
    - name: MYSQL_DATABASE
      value: wordpress

---
apiVersion: v1
kind: Service
metadata:
  name: mydb-svc
spec:
  type: ClusterIP
  selector:
    app: mydb
  ports:
  - port: 3306
#how do I know that mysql is using the port 3306?
##A: it is defined in the dockerhub.com image of mysql container documentation

root@master:~/app#

### creates the all the resources from the current directly 
root@master:~/app/network# kubectl create -f .
pod/mydb created
service/mydb-svc created
pod/wp-2 created
service/wordpress-svc-2 created
Error from server (AlreadyExists): error when creating "wordpressNodePort.yaml": pods "wp" already exists
Error from server (Invalid): error when creating "wordpressNodePort.yaml": Service "wordpress-svc" is invalid: spec.ports[0].nodePort: Invalid value: 30123: provided port is already allocated
root@master:~/app/network# kubectl get svc
NAME              TYPE        CLUSTER-IP       EXTERNAL-IP   PORT(S)        AGE
kubernetes        ClusterIP   10.96.0.1        <none>        443/TCP        52d
mydb-svc          ClusterIP   10.108.210.100   <none>        3306/TCP       19s
wordpress-svc     NodePort    10.105.111.172   <none>        80:30123/TCP   2d23h
wordpress-svc-2   NodePort    10.106.246.35    <none>        80:30124/TCP   19s
root@master:~/app/network#  kubectl delete -f .
pod "mydb" deleted
service "mydb-svc" deleted
pod "wp-2" deleted
service "wordpress-svc-2" deleted
pod "wp" deleted
service "wordpress-svc" deleted
kroot@master:~/app/network# kubectl delete svc wordpress-svc
Error from server (NotFound): services "wordpress-svc" not found
root@master:~/app/network# kubectl get svc
NAME         TYPE        CLUSTER-IP   EXTERNAL-IP   PORT(S)   AGE
kubernetes   ClusterIP   10.96.0.1    <none>        443/TCP   52d
root@master:~/app/network#

### app1 app2 and db has been created
root@master:~/app/network# kubectl create -f .
pod/mydb created
service/mydb-svc created
pod/wp-2 created
service/wordpress-svc-2 created
pod/wp created
service/wordpress-svc created
root@master:~/app/network#
