########## CONFIGMAP ########## 

### What is the user of the configmap? 
we used wordpress where you were using the environment variables, assume that some of the environment variables I want to use it in the multiple deployments. Each and everytime Ill have to go and define 
environment variables for 100's of environment variables for pods and every time mentioning environment variables is not a good practice. You can keep it in one place and call those environment variables 
for multiple deployments/pods. If you want to change the environment variables, you can just update it in one place and rest of the places it will be patched. You will not need to create a pod again.

How we can write and store these environment variables? 
we can do this through the configMap. 

place the environment variables on a note pad for now
    env:
    - name: WORDPRESS_DB_HOST
      value: mydb-svc
    - name: WORDPRESS_DB_USER
      value: root
    - name: WORDPRESS_DB_PASSWORD
      value: test123
    - name: WORDPRESS_DB_NAME
      value: wordpress
    - name: WORDPRESS_TABLE_PREFIX
      value: wp_

### create the config map yaml file 
root@master:~/app# kubectl create configmap mywp --from-literal WORDPRESS_DB_HOST=mydb-svc --from-literal WORDPRESS_DB_USER=root --from-literal WORDPRESS_DB_PASSWORD=test123 --from-literal WORDPRESS_DB_NAME=wordpress --from-literal WORDPRESS_TABLE_PREFIX=wp_ --dry-run=client -o yaml
apiVersion: v1
data:
  WORDPRESS_DB_HOST: mydb-svc
  WORDPRESS_DB_NAME: wordpress
  WORDPRESS_DB_PASSWORD: test123
  WORDPRESS_DB_USER: root
  WORDPRESS_TABLE_PREFIX: wp_
kind: ConfigMap
metadata:
  creationTimestamp: null
  name: mywp
root@master:~/app#

# save it to the file
root@master:~/app# kubectl create configmap mywp --from-literal WORDPRESS_DB_HOST=mydb-svc --from-literal WORDPRESS_DB_USER=root --from-literal WORDPRESS_DB_PASSWORD=test123 --from-literal WORDPRESS_DB_NAME=wordpress --from-literal WORDPRESS_TABLE_PREFIX=wp_ --dry-run=client -o yaml > co
nfigmap.yaml
root@master:~/app#

root@master:~/app# nano configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  creationTimestamp: null
  name: mywp
data:
  WORDPRESS_DB_HOST: mydb-svc
  WORDPRESS_DB_NAME: wordpress
  WORDPRESS_DB_PASSWORD: test123
  WORDPRESS_DB_USER: root
  WORDPRESS_TABLE_PREFIX: wp_

root@master:~/app# nano configmap.yaml
root@master:~/app# kubectl create -f configmap.yaml
configmap/mywp created
root@master:~/app# kubectl get configmaps
NAME               DATA   AGE
kube-root-ca.crt   1      49d
mywp               5      7s
root@master:~/app#

root@master:~/app# kubectl describe configmaps mywp
Name:         mywp
Namespace:    default
Labels:       <none>
Annotations:  <none>

Data
====
WORDPRESS_TABLE_PREFIX:
----
wp_
WORDPRESS_DB_HOST:
----
mydb-svc
WORDPRESS_DB_NAME:
----
wordpress
WORDPRESS_DB_PASSWORD:
----
test123
WORDPRESS_DB_USER:
----
root

BinaryData
====

Events:  <none>
root@master:~/app#

### Now I want to call this config map in my wordpress pod
root@master:~/app/secretsandconfigmap# nano wp-callconfigmap.yaml
apiVersion: v1
kind: Pod
metadata:
  name: wp
  labels:
    app: mywp
spec:
  containers:
  - name: con1
    image: wordpress:latest
    ports:
    - containerPort: 80
    envFrom:
    - configMapRef:
        name: mywp # name of the config map, you can get this through kubectl get configmap or from the file from which you deployed (cm)
---
apiVersion: v1
kind: Service
metadata:
  name: wordpress-svc
spec:
  type: NodePort
  selector:
    app: mywp
  ports:
  - port: 80
    nodePort: 30123

root@master:~/app/secretsandconfigmap# kubectl create -f wp-callconfigmap.yaml
pod/wp created
service/wordpress-svc created
root@master:~/app/secretsandconfigmap#

root@master:~/app/secretsandconfigmap# kkgp
NAME   READY   STATUS    RESTARTS   AGE
wp     1/1     Running   0          11s
root@master:~/app/secretsandconfigmap# kkdp wp
....
  Environment Variables from:
      mywp        ConfigMap  Optional: false
    Environment:  <none>
    Mounts:
      /var/run/secrets/kubernetes.io/serviceaccount from kube-api-access-ptnj6 (ro)
....

### we can read the configmap values from the container
### you can read the variables through the echo $ 
root@master:~/app/secretsandconfigmap# kubectl exec -it wp -- bash
root@wp:/var/www/html# echo $WORDPRESS_TABLE_PREFIX
wp_
root@wp:/var/www/html# echo $WORDPRESS_DB_HOST
mydb-svc
root@wp:/var/www/html#


### configmaps can be used in the 2 ways 2nd way is to store it in the file
1st is the environment variables like above steps. 
2nd is to store the configmap in a file that we are going to implement now. 

### you can change any of the file from the docker images
root@master:~/app/secretsandconfigmap# nano index.html
root@master:~/app/secretsandconfigmap# cat index.html
<h1> Hello from ConfigMap </h1>


root@master:~/app/secretsandconfigmap# kubectl create configmap myindex --from-file index.html --dry-run=client -o yaml
apiVersion: v1
data:
  index.html: |
    <h1> Hello from ConfigMap </h1>
kind: ConfigMap
metadata:
  creationTimestamp: null
  name: myindex
root@master:~/app/secretsandconfigmap#

root@master:~/app/secretsandconfigmap# kubectl create configmap myindex --from-file index.html
configmap/myindex created
root@master:~/app/secretsandconfigmap#

root@master:~/app/secretsandconfigmap# kubectl get configmap
NAME               DATA   AGE
kube-root-ca.crt   1      49d
myindex            1      69s
mywp               5      19m
root@master:~/app/secretsandconfigmap#

root@master:~/app/secretsandconfigmap# kubectl describe configmap myindex
Name:         myindex
Namespace:    default
Labels:       <none>
Annotations:  <none>

Data
====
index.html:
----
<h1> Hello from ConfigMap </h1>


BinaryData
====

Events:  <none>
root@master:~/app/secretsandconfigmap#

### now I want to call this file in my pod or deployment somewhere.
root@master:~/app/secretsandconfigmap# nano wp-configmap-fromfile.yaml
apiVersion: v1
kind: Pod
metadata:
  name: wp
  labels:
    app: mywp
spec:
  containers:
  - name: con1
    image: nginx:latest
    ports:
    - containerPort: 80
    volumeMounts: ### 2nd
    - name: myvol
      mountPath: /usr/share/nginx/html
  volumes: ### 1st this is important when creating configmap from file.
  - name: myvol
    configMap: ### very important this volume will be spinned up through the configmap
      name: myindex
---
apiVersion: v1
kind: Service
metadata:
  name: wordpress-svc
spec:
  type: NodePort
  selector:
    app: mywp
  ports:
  - port: 80
    nodePort: 30123

root@master:~/app/secretsandconfigmap# kubectl create -f wp-configmap-fromfile.yaml
Error from server (AlreadyExists): error when creating "wp-configmap-fromfile.yaml": pods "wp" already exists
Error from server (Invalid): error when creating "wp-configmap-fromfile.yaml": Service "wordpress-svc" is invalid: spec.ports[0].nodePort: Invalid value: 30123: provided port is already allocated
root@master:~/app/secretsandconfigmap# kkgp
NAME   READY   STATUS    RESTARTS   AGE
wp     1/1     Running   0          25m
root@master:~/app/secretsandconfigmap# kk delete po wp
pod "wp" deleted
root@master:~/app/secretsandconfigmap# kk get svc
NAME            TYPE        CLUSTER-IP      EXTERNAL-IP   PORT(S)        AGE
kubernetes      ClusterIP   10.96.0.1       <none>        443/TCP        49d
wordpress-svc   NodePort    10.109.138.93   <none>        80:30123/TCP   25m

root@master:~/app/secretsandconfigmap# kk delete svc wordpress-svc
service "wordpress-svc" deleted
root@master:~/app/secretsandconfigmap#

root@master:~/app/secretsandconfigmap# kubectl create -f wp-configmap-fromfile.yaml
pod/wp created
service/wordpress-svc created
root@master:~/app/secretsandconfigmap#

root@master:~/app/secretsandconfigmap# kubectl get svc
NAME            TYPE        CLUSTER-IP       EXTERNAL-IP   PORT(S)        AGE
kubernetes      ClusterIP   10.96.0.1        <none>        443/TCP        49d
wordpress-svc   NodePort    10.105.111.172   <none>        80:30123/TCP   12s
root@master:~/app/secretsandconfigmap#

===== ON BROWSER =====  
http://192.168.29.134:30123/
Hello from ConfigMap

### the steps above is how we can use the configMaps from the file. 
# what is the use of the configmap 

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

########## SECRETS ########## 
### whenever you want to centralize the environment variables and you want to call into multiple deployment, you will have to use the configmap
### the use of the Secret is encryption. 
### previously we were using the password of the variable as plain text but we want to use it as encryption
### We are going to use the Generic kubernetes secrets. 
### For Sticky secrets you need to use Hasicorp vault. 

### SECRET COMMAND:
### you use secrets for encryption
controlplane $ kubectl create secret generic testwp --from-literal wppass=test123 --dry-run=client -o yaml > secret.yaml
controlplane $ kubectl create secret generic testwp --from-literal wppass=test123 --dry-run=client -o yaml 
apiVersion: v1
data:
  wppass: dGVzdDEyMw==
kind: Secret
metadata:
  creationTimestamp: null
  name: testwp
controlplane $ 

controlplane $ kubectl create secret generic testwp --from-literal wppass=test123 
secret/testwp created
controlplane $ 

### how can I call this secret in my yaml file? 
controlplane $ kubectl get secrets 
NAME     TYPE     DATA   AGE
testwp   Opaque   1      21s
controlplane $ 

### we will create a simple wp yaml file and call the secret above and inject it into the environment variable
controlplane $ nano wppod-secretcall.yaml
apiVersion: v1
kind: Pod
metadata:
  name: wp
  labels:
    app: mywp
spec:
  containers:
  - name: con1
    image: wordpress:latest
    env:
    - name: WORDPRESS_DB_HOST
      value: wordpress
    - name: WORDPRESS_DB_USER
      value: root
    - name: WORDPRESS_DB_PASSWORD
      value: ### I want to get this password from the secret
      valueFrom:
        secretKeyRef:
          name: testwp  ### secret key
          key: wppass   ### secret value #we are calling is coming from the secret called testwp
    - name: WORDPRESS_DB_NAME
      value: wordpress
    - name: WORDPRESS_TABLE_PREFIX
      value: wp_

controlplane $ kubectl get secrets 
NAME     TYPE     DATA   AGE
testwp   Opaque   1      9m2s
controlplane $ kubectl describe secret testwp
Name:         testwp
Namespace:    default
Labels:       <none>
Annotations:  <none>

Type:  Opaque

Data
====
wppass:  7 bytes
controlplane $ 

### How to view the key value? 
controlplane $ kubectl get secrets testwp -o yaml
apiVersion: v1
data:
  wppass: dGVzdDEyMw==    <--------------------------- ENCRYPTED KEY
kind: Secret
metadata:
  creationTimestamp: "2025-01-07T00:25:23Z"
  name: testwp
  namespace: default
  resourceVersion: "7023"
  uid: 72cdba6d-8f9e-4935-b34b-2d8024466fd3
type: Opaque
controlplane $ 

### DECRYPTION COMMAND: you have to have an access of your node in order to get the decryption correct. 
### to decrypt this key above, copy it and 
controlplane $ echo dGVzdDEyMw== | base64 -d
test123controlplane $ 

### Lets create the pod from above file so that the secret can be injected and called through the file
controlplane $ kubectl create -f secretcall-wordpresspod.yaml 
pod/wp created
controlplane $ 

### We will be reading the value from the pod 
controlplane $ kubectl describe pod wp 
...
    Environment:
      WORDPRESS_DB_HOST:       wordpress
      WORDPRESS_DB_USER:       root
      WORDPRESS_DB_PASSWORD:   <set to the key 'wppass' in secret 'testwp'>  Optional: false    <-------------------- it is coming from the secret testwp and the key is wppass and 
      WORDPRESS_DB_NAME:       wordpress
      WORDPRESS_TABLE_PREFIX:  wp_
...

### Getting the environment variables from inside the container to see that the SECRET has been inserted
controlplane $ kubectl exec -it wp -- bash
root@wp:/var/www/html# 
root@wp:/var/www/html# echo $WORDPRESS_DB_PASSWORD
test123
root@wp:/var/www/html# 

root@wp:/var/www/html# print env
bash: print: command not found
root@wp:/var/www/html# printenv
KUBERNETES_SERVICE_PORT_HTTPS=443
KUBERNETES_SERVICE_PORT=443
HOSTNAME=wp
PHP_VERSION=8.2.27
APACHE_CONFDIR=/etc/apache2
PHP_INI_DIR=/usr/local/etc/php
GPG_KEYS=39B641343D8C104B2B146DC3F9C39DC0B9698544 E60913E4DF209907D8E30D96659A97C9CF2A795A 1198C0117593497A5EC5C199286AF1F9897469DC
PHP_LDFLAGS=-Wl,-O1 -pie
PWD=/var/www/html
HOME=/root
KUBERNETES_PORT_443_TCP=tcp://10.96.0.1:443
WORDPRESS_TABLE_PREFIX=wp_
PHP_SHA256=3eec91294d8c09b3df80b39ec36d574ed9b05de4c8afcb25fa215d48f9ecbc6b
WORDPRESS_DB_HOST=wordpress
PHPIZE_DEPS=autoconf            dpkg-dev                file            g++             gcc             libc-dev                make            pkg-config              re2c
TERM=xterm
PHP_URL=https://www.php.net/distributions/php-8.2.27.tar.xz
SHLVL=1
KUBERNETES_PORT_443_TCP_PROTO=tcp
PHP_CFLAGS=-fstack-protector-strong -fpic -fpie -O2 -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64
KUBERNETES_PORT_443_TCP_ADDR=10.96.0.1
WORDPRESS_DB_PASSWORD=test123
APACHE_ENVVARS=/etc/apache2/envvars
KUBERNETES_SERVICE_HOST=10.96.0.1
KUBERNETES_PORT=tcp://10.96.0.1:443
KUBERNETES_PORT_443_TCP_PORT=443
WORDPRESS_DB_USER=root
PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
WORDPRESS_DB_NAME=wordpress
PHP_ASC_URL=https://www.php.net/distributions/php-8.2.27.tar.xz.asc
PHP_CPPFLAGS=-fstack-protector-strong -fpic -fpie -O2 -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64
_=/usr/bin/printenv
root@wp:/var/www/html# 

### IN ABOVE STEPS YOU CAN LEARN HOW TO STORE THE SECRETS IN THE GENERIC WAY

================ SECRET IN FILES ================ 
Secret in files. How it works. 


