### im having multiple applications running in my cluster and a database
these application uses backend database. I can create a networking rule, which says that who can talk to these application
we will learn a simple networking rule implementation. Based on the labels, the network policies will be implemented 
pods 
----
app1
app2
DB

root@master:~/app# cp wordpressNodePort.yaml network/
root@master:~/app# cp mysqlClusterIP.yaml network/
root@master:~/app# cd network/
root@master:~/app/network# cp wordpressNodePort.yaml wordpressNodePort-2.yaml
root@master:~/app/network# ls
mysqlClusterIP.yaml  wordpressNodePort-2.yaml  wordpressNodePort.yaml
root@master:~/app/network#
root@master:~/app/network# nano wordpressNodePort.yaml

apiVersion: v1
kind: Pod
metadata:
  name: wp1
  labels:
    app: mywp1    ### this is the label for the pod and selector is in the Nodeport section below
spec:
  containers:
  - name: con1
    image: wordpress:latest
    ports:
    - containerPort: 80
    env:
    - name: WORDPRESS_DB_HOST
      value: mydb-svc
    - name: WORDPRESS_DB_USER
      value: root
    - name: WORDPRESS_DB_PASSWORD
      value: test123
    - name: WORDPRESS_DB_NAME
      value: wordpress
    - name: WORDPRESS_TABLE_PREFIX
      value: wp_
---
apiVersion: v1
kind: Service
metadata:
  name: wordpress-svc-1
spec:
  type: NodePort
  selector:
    app: mywp1      ### this is a selector which is selecting the pod label above
  ports:
  - port: 80
    nodePort: 30123
    
root@master:~/app/network#
root@master:~/app/network# cp wordpressNodePort.yaml wordpressNodePort-2.yaml
root@master:~/app/network# ls
wordpressNodePort-2.yaml  wordpressNodePort.yaml
root@master:~/app/network#

root@master:~/app/network# cat wordpressNodePort-2.yaml
apiVersion: v1
kind: Pod
metadata:
  name: wp2    
  labels:
    app: mywp2    ### this is the label for the pod and selector is in the Nodeport section below
spec:
  containers:
  - name: con2
    image: wordpress:latest
    ports:
    - containerPort: 80
    env:
    - name: WORDPRESS_DB_HOST
      value: mydb-svc
    - name: WORDPRESS_DB_USER
      value: root
    - name: WORDPRESS_DB_PASSWORD
      value: test123
    - name: WORDPRESS_DB_NAME
      value: wordpress
    - name: WORDPRESS_TABLE_PREFIX
      value: wp2_
---
apiVersion: v1
kind: Service
metadata:
  name: wordpress-svc-2
spec:
  type: NodePort
  selector:
    app: mywp2    ### this is a selector which is selecting the pod label above
  ports:
  - port: 80
    nodePort: 30124

root@master:~/app/network#

root@master:~/app# nano mysqlClusterIP.yaml

apiVersion: v1
kind: Pod
metadata:
  name: mydb
  labels:
    app: mydb    ### this is the label for the pod and selector is in the Nodeport section below
spec:
  containers:
  - name: db
    image: mysql:latest
    ports:
    - containerPort: 3306
    env:
    - name: MYSQL_ROOT_PASSWORD
      value: test123
    - name: MYSQL_DATABASE
      value: wordpress
---
apiVersion: v1
kind: Service
metadata:
  name: mydb-svc
spec:
  type: ClusterIP
  selector:
    app: mydb    ### this is a selector which is selecting the pod label above
  ports:
  - port: 3306


#how do I know that mysql is using the port 3306?
##A: it is defined in the dockerhub.com image of mysql container documentation

root@master:~/app#

### creates the all the resources from the current directly 
root@master:~/app/network# kubectl create -f .
pod/mydb created
service/mydb-svc created
pod/wp-2 created
service/wordpress-svc-2 created
Error from server (AlreadyExists): error when creating "wordpressNodePort.yaml": pods "wp" already exists
Error from server (Invalid): error when creating "wordpressNodePort.yaml": Service "wordpress-svc" is invalid: spec.ports[0].nodePort: Invalid value: 30123: provided port is already allocated
root@master:~/app/network# kubectl get svc
NAME              TYPE        CLUSTER-IP       EXTERNAL-IP   PORT(S)        AGE
kubernetes        ClusterIP   10.96.0.1        <none>        443/TCP        52d
mydb-svc          ClusterIP   10.108.210.100   <none>        3306/TCP       19s
wordpress-svc     NodePort    10.105.111.172   <none>        80:30123/TCP   2d23h
wordpress-svc-2   NodePort    10.106.246.35    <none>        80:30124/TCP   19s
root@master:~/app/network#  kubectl delete -f .
pod "mydb" deleted
service "mydb-svc" deleted
pod "wp-2" deleted
service "wordpress-svc-2" deleted
pod "wp" deleted
service "wordpress-svc" deleted
kroot@master:~/app/network# kubectl delete svc wordpress-svc
Error from server (NotFound): services "wordpress-svc" not found
root@master:~/app/network# kubectl get svc
NAME         TYPE        CLUSTER-IP   EXTERNAL-IP   PORT(S)   AGE
kubernetes   ClusterIP   10.96.0.1    <none>        443/TCP   52d
root@master:~/app/network#

### app1 app2 and db has been created
root@master:~/app/network# kubectl create -f .
pod/mydb created
service/mydb-svc created
pod/wp-2 created
service/wordpress-svc-2 created
pod/wp created
service/wordpress-svc created
root@master:~/app/network#

### THESE TWO APPLICATION PODS (WORDPRESS) ARE USING THE SAME DATABASE
============ ON BROWSER: =============
http://192.168.29.134:30123/wp-admin/install.php
Welcome
Welcome to the famous five-minute WordPress installation process! Just fill in the information below and you’ll be on your way to using the most extendable and powerful personal publishing platform in the world.

http://192.168.29.134:30124/wp-admin/install.php?step=1
Welcome
Welcome to the famous five-minute WordPress installation process! Just fill in the information below and you’ll be on your way to using the most extendable and powerful personal publishing platform in the world.

-----------------------------------------------------------------------------------------------------------------------------------------------------------
################################## CNI BEGINS ##################################
###
if you are thinking to implement networking rule, where wp1 is only talk to DB. 
we need to implement the network policy 
these network policies will be working with few of the CNI image cluster creation


### some widely CNI's are Calico, Cilium, and WeaveNet.
### are few of the plugins which supports Network Policies
# flannel is also a CNI and it will allow you to create the network policy but it will not work. Becareful which CNI you use. 
# Calico and Cilium is most widely used 
# WeaveNet is lightweight
### we have deployed calico here 

root@master:~/app/network# kubectl get pod -n kube-system
NAME                                       READY   STATUS    RESTARTS        AGE
calico-kube-controllers-787f445f84-gdc7t   1/1     Running   5               51d
calico-node-mrm6j                          1/1     Running   4               51d
calico-node-vhd49                          1/1     Running   5               51d
calico-node-x4q65                          1/1     Running   4               51d
coredns-5dd5756b68-84w4t                   1/1     Running   8               54d
coredns-5dd5756b68-m64mp                   1/1     Running   8               54d
etcd-master                                1/1     Running   8               54d
kube-apiserver-master                      1/1     Running   8               54d
kube-controller-manager-master             1/1     Running   14 (4d6h ago)   54d
kube-proxy-k4pzl                           1/1     Running   8               54d
kube-proxy-k88rh                           1/1     Running   5               52d
kube-proxy-sr6kt                           1/1     Running   5               51d
kube-scheduler-master                      1/1     Running   14 (8d ago)     54d
metrics-server-58ff449c8d-bch5w            1/1     Running   0               11d
root@master:~/app/network#

### How to implement the Network policies

https://kubernetes.io/docs/concepts/services-networking/network-policies/
