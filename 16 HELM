Helm Documentations:
https://helm.sh/docs/intro/install/

###  how do you download the packages on linux? 
through tar files
through curl 
through apt on debain or yum/dnf on the fedora based linux 

apt-install apache2 -y 
  if you are downloading through the tar file then you will be sorting everything. Example: 
  you will be downloading the daemons and starting them and their services binaries and the dependencies, you will have to take care of all the steps 
but with the apt install apache -y all the dependencies are already places in the repositories and are resolved with just one command to install the apache

package installers makes the installation process easy. 
Similarly in the k8s, to deploy our application we are making so many types of the yaml files to deploy the application. 
You might be having 
deployment.yaml
config.yaml
secret.yaml
ingress.yaml 
serviceclusterIp.yaml
values.yaml ( you will be parseing the values of the deployment/pod through this file. ) This file will be passing the values to all of the yaml files secret or ingress files

just few I am talking about for example, when you are talking about on the enterprise level there will be so many of the yaml files. 

Now thing that you want to deploy an application in one of the environment. I want to install currently in UAT
I already tested in Dev environment and I want to deploy into the UAT environment, I can keep this yaml file on the centralized repository on the github,
I can just do the git clone, then I will do something like 

kubectl create -f . 
Now after sometime, I want to move it to the Prod or some other environment, I will be calling this from the centralized repository gitclone 
and re-apply

you know what happens is that, in different environments we might need different settings and the process above might not work. 
example in DEV I have different requirements like different cpu memory replica environment in DEV and UAT I might have different requirements. 


In Pre-Prod I might have different requirements that I will have to do. 
If this is the case 

It will be problamatic if I have different environments and each environment have different requirements,
and for each environments I will have to keep seperate repositories and same file 
in this case it will cause a lot of issues. And if there are secrets involved then I cant keep them on the repositories. I will have to dynamically define the values. 

###
all of the yaml file, you can convert it into the package and host it into one repository and just add that repository in your environment and you can pass 
required values in the yaml file

################### HELM Begins ################### 
### Helm is kubernetes-based package installer.
- helm is the best way to find, share, and use software built for kubernetes
- helm helps user to maintain the Application
- Helm is managedc by CNCF - Cloud Native Computing Foundation
- Helm manages kubernetes "charts", which are "preconfigured packages of kubernetes resources."
- Helm enables you to easily install packatges, make revisions, anad even roll back complex changes. 

selection of the yaml file is called charts. 

Why we need helm:
- Helm lets you fetch, deploy land manage the lifecycle of applciations, both 3rd party products and your own.
- With helm, there is a structure and a convention for a software package that defines a layer of YAML templates and another layer that changes the templates
called values.
- values are injected into templates, thus allowing a separation of configuration, and defines where chagnes are allowed.
- This whole package is called a Helm Chart.
- Essentially you create structured application packages that contain everything they need to run on a Kuberntes cluster; including dependencies the applciation requires. 
                                                                                                                    
                                                                                                  -------- convert tar and share it
                                                                                      REPOSITORY ----------------------------------------------------|                                                                                                           |                                                    pull and deploy      
----yaml files-----------------------------------helm----> package chartfile using helm------deploy to cluster----------------------------> kubernetes cluster
(deployment.yaml, ingress,yaml,configmap.yaml)                                                  (create,install,update,rollback,delete)


# lets say that your chart is ready and you didnt package it, without the package chart can also be deployed to the kubernetes cluster

COMPONENT
Helm Client/Binary----------------->Chart------------------------------------->Repositories----------------------->Release
it will alow to communicate k8s      Collection of applciation YML files        To store and manage Charts            Deployment of charts in k8s cluster

### HELM INSTALLATION: 
https://helm.sh/docs/intro/install/
### we are going to install the helm through the TAR
STEPS:
1. Download your desired version: https://github.com/helm/helm/releases
  a. wget (to install it from the web)
    example: I am downloading the older version 3.7
2. Unpack it (tar -zxvf helm-v3.0.0-linux-amd64.tar.gz)
3. Find the helm binary in the unpacked directory, and move it to its desired destination (mv linux-amd64/helm /usr/local/bin/helm)


root@master:/usr/bin/helm-3.17.0/scripts# ./get-helm-3
[WARNING] Could not find git. It is required for plugin installation.
Downloading https://get.helm.sh/helm-v3.17.0-linux-amd64.tar.gz
Verifying checksum... Done.
Preparing to install helm into /usr/local/bin
helm installed into /usr/local/bin/helm
root@master:/usr/bin/helm-3.17.0/scripts# helm
The Kubernetes package manager

Common actions for Helm:

- helm search:    search for charts
- helm pull:      download a chart to your local directory to view
- helm install:   upload the chart to Kubernetes
- helm list:      list releases of charts

Environment variables:

| Name                               | Description                                                                                                |
|------------------------------------|------------------------------------------------------------------------------------------------------------|
| $HELM_CACHE_HOME                   | set an alternative location for storing cached files.                                                      |
| $HELM_CONFIG_HOME                  | set an alternative location for storing Helm configuration.                                                |
| $HELM_DATA_HOME                    | set an alternative location for storing Helm data.                                                         |
| $HELM_DEBUG                        | indicate whether or not Helm is running in Debug mode                                                      |
| $HELM_DRIVER                       | set the backend storage driver. Values are: configmap, secret, memory, sql.                                |
| $HELM_DRIVER_SQL_CONNECTION_STRING | set the connection string the SQL storage driver should use.                                               |
| $HELM_MAX_HISTORY                  | set the maximum number of helm release history.                                                            |
| $HELM_NAMESPACE                    | set the namespace used for the helm operations.                                                            |
| $HELM_NO_PLUGINS                   | disable plugins. Set HELM_NO_PLUGINS=1 to disable plugins.                                                 |
| $HELM_PLUGINS                      | set the path to the plugins directory                                                                      |
| $HELM_REGISTRY_CONFIG              | set the path to the registry config file.                                                                  |
| $HELM_REPOSITORY_CACHE             | set the path to the repository cache directory                                                             |
| $HELM_REPOSITORY_CONFIG            | set the path to the repositories file.                                                                     |
| $KUBECONFIG                        | set an alternative Kubernetes configuration file (default "~/.kube/config")                                |
| $HELM_KUBEAPISERVER                | set the Kubernetes API Server Endpoint for authentication                                                  |
| $HELM_KUBECAFILE                   | set the Kubernetes certificate authority file.                                                             |
| $HELM_KUBEASGROUPS                 | set the Groups to use for impersonation using a comma-separated list.                                      |
| $HELM_KUBEASUSER                   | set the Username to impersonate for the operation.                                                         |
| $HELM_KUBECONTEXT                  | set the name of the kubeconfig context.                                                                    |
| $HELM_KUBETOKEN                    | set the Bearer KubeToken used for authentication.                                                          |
| $HELM_KUBEINSECURE_SKIP_TLS_VERIFY | indicate if the Kubernetes API server's certificate validation should be skipped (insecure)                |
| $HELM_KUBETLS_SERVER_NAME          | set the server name used to validate the Kubernetes API server certificate                                 |
| $HELM_BURST_LIMIT                  | set the default burst limit in the case the server contains many CRDs (default 100, -1 to disable)         |
| $HELM_QPS                          | set the Queries Per Second in cases where a high number of calls exceed the option for higher burst values |

Helm stores cache, configuration, and data based on the following configuration order:

- If a HELM_*_HOME environment variable is set, it will be used
- Otherwise, on systems supporting the XDG base directory specification, the XDG variables will be used
- When no other location is set a default location will be used based on the operating system

By default, the default directories depend on the Operating System. The defaults are listed below:

| Operating System | Cache Path                | Configuration Path             | Data Path               |
|------------------|---------------------------|--------------------------------|-------------------------|
| Linux            | $HOME/.cache/helm         | $HOME/.config/helm             | $HOME/.local/share/helm |
| macOS            | $HOME/Library/Caches/helm | $HOME/Library/Preferences/helm | $HOME/Library/helm      |
| Windows          | %TEMP%\helm               | %APPDATA%\helm                 | %APPDATA%\helm          |

Usage:
  helm [command]

Available Commands:
  completion  generate autocompletion scripts for the specified shell
  create      create a new chart with the given name
  dependency  manage a chart's dependencies
  env         helm client environment information
  get         download extended information of a named release
  help        Help about any command
  history     fetch release history
  install     install a chart
  lint        examine a chart for possible issues
  list        list releases
  package     package a chart directory into a chart archive
  plugin      install, list, or uninstall Helm plugins
  pull        download a chart from a repository and (optionally) unpack it in local directory
  push        push a chart to remote
  registry    login to or logout from a registry
  repo        add, list, remove, update, and index chart repositories
  rollback    roll back a release to a previous revision
  search      search for a keyword in charts
  show        show information of a chart
  status      display the status of the named release
  template    locally render templates
  test        run tests for a release
  uninstall   uninstall a release
  upgrade     upgrade a release
  verify      verify that a chart at the given path has been signed and is valid
  version     print the client version information

Flags:
      --burst-limit int                 client-side default throttling limit (default 100)
      --debug                           enable verbose output
  -h, --help                            help for helm
      --kube-apiserver string           the address and the port for the Kubernetes API server
      --kube-as-group stringArray       group to impersonate for the operation, this flag can be repeated to specify multiple groups.
      --kube-as-user string             username to impersonate for the operation
      --kube-ca-file string             the certificate authority file for the Kubernetes API server connection
      --kube-context string             name of the kubeconfig context to use
      --kube-insecure-skip-tls-verify   if true, the Kubernetes API server's certificate will not be checked for validity. This will make your HTTPS connections insecure
      --kube-tls-server-name string     server name to use for Kubernetes API server certificate validation. If it is not provided, the hostname used to contact the server is used
      --kube-token string               bearer token used for authentication
      --kubeconfig string               path to the kubeconfig file
  -n, --namespace string                namespace scope for this request
      --qps float32                     queries per second used when communicating with the Kubernetes API, not including bursting
      --registry-config string          path to the registry config file (default "/root/.config/helm/registry/config.json")
      --repository-cache string         path to the directory containing cached repository indexes (default "/root/.cache/helm/repository")
      --repository-config string        path to the file containing repository names and URLs (default "/root/.config/helm/repositories.yaml")

Use "helm [command] --help" for more information about a command.
root@master:/usr/bin/helm-3.17.0/scripts# helm version
version.BuildInfo{Version:"v3.17.0", GitCommit:"301108edc7ac2a8ba79e4ebf5701b0b6ce6a31e4", GitTreeState:"clean", GoVersion:"go1.23.4"}
root@master:/usr/bin/helm-3.17.0/scripts#
