########## DAEMONSET ##########
# let's suppose you have 3 workder node and I have to deploy application pod in each of the worker node
# till now we deploy the replicas of our pod through replicaController, ReplicaSet, and deployment. 
# Now see that, if you are going with above objects, they will create the replicas but doesnt guarantee that my application will be deployed in each of the worker node
# Let's suppose I am having some of the application which is primarily using for logging and monitoring
# whenever we are trying to deploy some of the logging monitoring application like ELK file beat monitoring applications
# these application should be deployed in each of the worker node, so that we able to collect logs and metrics.
# In this situation, the deployment will not be helping you out! Why?
# it will be guaranteeing you to define the number of replicas, but it will not guaranteeing you that it's replica will be going in each of the worker nodes. 

# the thing is that, I want to deploy the pod replica in each of the worker node. Let's assume that, my pod got deployed in each of the node.
# I have three worker nodes. Somehow, worker node3 is not up and running. The pod will not be getting deployed somewhere. It will be in its place. 
# if I add one more node in cluster, a new pod will be deployed in the new node in the cluster. 
node1
node2
node3

node4 

### IMPORTANT
### whenever we deploy an application, which is required to run on the each of the node. Then we will go for the DaemonSets
### what kind of those application can be? 
### logging and monitoring application, to collect the logs and metrics. Such applications requires to go and deployed in each of the node, so that we can collect information
# from the each of the worker node. It could be logging or metric (cpu or memory) We will go for the DAEMONSET

### what is the need for DaemonSet?
# A DaemonSet is a Kubernetes resource used to ensure that a specific pod is running on all (or some) nodes in a Kubernetes cluster. It plays a crucial role in scenarios where you need to deploy background tasks,
#monitoring agents, log collectors, or other system-level services across every node in the cluster.

### once you are creating DaemonSet, your pod will be getting created in each of the worker node. You dont need to define the number of replicas, it depends on the number of worker nodes.
# you can deploy a daemonset on the master node as well if it is an on-prem server or cop server.
# if it is a cloud kubernetes, you can see master node server on cloudwatch or some other services.
# if some worker node is failing or going down. What will happen is, in such scenerio the pod will node be re-scheduling on other nodes.
# if the worker node is back again, the pod will be back again.
# if a new worker node is connected to cluster, the new DAEMON POD will be deployed and get the logs and metrics. 
# DaemonSets gets deployed based on the worker nodes.

# we will be copying the yaml from the kubernetes documentation below:
https://kubernetes.io/docs/concepts/workloads/controllers/daemonset/


