we will create two pods exanmmple: 
node1 
192.168.0.20
wordpress

node2 
192.168.0.21
db 
  labels:
    app:mydb

these two pods above will be communicating through ClusterIP service 

## this service will be used as the hostname while connecting to the database
apiVersion:v1
metadata:
  name: mydb
spec:
  type: ClusterIP
  ports:
  - port: 3306
  selector:
    app: mydb

-------------------
| mypod 10.1.2.50 |
-------------------
| - wordpress 80  |
| - db 3306       |
-------------------

Based on the hostname (which is essentially the pod name) and the port number, containers within the same pod can communicate with each other.
This type of service is called a NodePort. When two services exist within the same pod, the NodePort service allows communication between them.

############### FIXED YAML FOR WORDPRESS AND MYSQL WITH NODEPORT SERVICE ###############
vi wordpressaneeshfixed.yaml
apiVersion: v1
kind: Pod
metadata:
  name: wordpress
  labels:
    app: wordpress
spec:
  containers:
  - name: con1
    image: wordpress:latest
    env:
    - name: WORDPRESS_DB_HOST
      value: wordpress
    - name: WORDPRESS_DB_USER
      value: root
    - name: WORDPRESS_DB_PASSWORD
      value: test123
    - name: WORDPRESS_DB_NAME
      value: wordpress
    - name: WORDPRESS_TABLE_PREFIX
      value: wp_
    ports:
    - containerPort: 80
  - name: con2
    image: mysql:5.7
    env:
    - name: MYSQL_ROOT_PASSWORD
      value: test123       # MySQL root password
    - name: MYSQL_DATABASE
      value: wordpress     # MySQL database name
    ports:
    - containerPort: 3306
---
apiVersion: v1
kind: Service
metadata:
  name: wordpress-svc
spec:
  type: NodePort
  selector:
    app: wordpress
  ports:
  - port: 80
    protocol: TCP
    targetPort: 80
    nodePort: 30124

:wq!



